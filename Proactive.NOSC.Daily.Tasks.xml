<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Proactive.NOSC.Daily.Tasks</ID>
      <Version>1.0.2.4</Version>
    </Identity>
    <Name>Proactive NOSC Daily Tasks</Name>
    <References>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Alert.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>10:05</Start>
                        <End>10:25</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Datasource.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather Expiring Certificate Alerts on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Datasource.v1024.ps1"
$EventID = "556"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date).")
 
# Expiring certificates
# Certificates about to expire/expired
#===============================================

$ExpCert = get-scomalert | ? { ($_.Name -eq "Certificate lifespan alert" ) } | ? { $_.ResolutionState -eq 0 }

$Message = "Daily Expiring Certificates report has ($Test) alerts for ($date)"

$Test = $ExpCert.count

$EXPAMessage = @()
$EXPAMessage += "# Certificates about to expire/expired"
$EXPAMessage += "#============================================================"
$EXPAMessage += $ExpCert | select NetBiosComputerName,Parameters | out-string
$EXPAMessage += ""
#$EXPAMessage += "# Certificate details"
#$EXPAMessage += "#=============================="
#$EXPAMessage += $ExpCert |fl NetBiosComputerName,Parameters,Description | out-string
$EXPAMessage += ""
$EXPAMessage

$EXPAMessage = $EXPAMessage | out-string


#============================================================


  $Result = "GOOD"
  $Message = "Daily Server Expiring certificates report for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of Expiring Certificates for ($date). `n `n$EXPAMessage")

$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$EXPAMessage)  

# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Alert.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>10:15</Start>
                        <End>10:25</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Alert.Rule.Datasource.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather Logical Disk Free space is low monitors and alert daily
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Alert.Rule.Datasource.v1024.ps1"
$EventID = "550"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"
 
# Resolution State 255 = closed
# Debug
#$Test = (get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -eq "255" }).Count
# Prod
$Test = (get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -ne "255" }).Count
$Test

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date). `n Number of alerts ($Test).")

IF ($Test -ge 1)
{
  $Result = "BAD"
  $Message = "Daily Logical Disk Free space report has ($Test) alerts for ($date)"

  write-host ""
  $Result
  write-host ""
  $Message
  write-host ""
  
  # Gather Summary section  
  # Debug
  #$Summary = get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -eq "255" } |select NetbiosComputerName,MonitoringObjectName,Parameters | out-string
  # Gather Details section
  #$Details = get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -eq "255" }| fl NetbiosComputerName,MonitoringObjectName,Parameters,Description | out-string
  # Production
  $Summary = get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -ne "255" } | select NetbiosComputerName,MonitoringObjectName,Parameters | out-string
  # Gather Details section
  $Details = get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -ne "255" }| fl NetbiosComputerName,MonitoringObjectName,Parameters,Description | out-string

  $Summary
  write-host ""
  $Details
  
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of Daily Logical Disk free space alerts for ($date). `n `n Summary of alerts `n $Summary `n Alert Details $Details")

  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message)
  $bag.AddValue('Summary',$Summary)
  $bag.AddValue('Details',$Details)
   
}
ELSE
{
  $Result = "GOOD"
  $Message = "Daily Logical Disk Free space report has ZERO alerts for ($date)"

  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message) 
  $bag.AddValue('Summary',$Summary)
  $bag.AddValue('Details',$Details)
  
  $momapi.LogScriptEvent($ScriptName,$EventID,0, "`n Daily Logical Disk Free space report has ZERO alerts for ($date)" )
}

# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Alert.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>10:06</Start>
                        <End>10:25</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Alert.Rule.Datasource.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather Pending Reboot Alerts, and alert daily
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Alert.Rule.Datasource.v1024.ps1"
$EventID = "552"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"
 
# Resolution State 255 = closed
# Debug
#$Test = (get-SCOMAlert -name "Monitor Alert - Server pending restart detected" | ? {$_.ResolutionState -eq "255" }).Count
#$Test = (get-SCOMAlert -name "PROACTIVE - Server restart pending detected" | ? {$_.ResolutionState -eq "255" }).Count
# Prod
#$Test = (get-SCOMAlert -name "PROACTIVE - Server restart pending detected" | ? {$_.ResolutionState -ne "255" }).Count

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date). `n Number of alerts ($Test).")

# Pending reboots
#  Gather Summary section  
#   Debug
  #$Summary = get-SCOMAlert -name "Monitor Alert - Server pending restart detected" | ? {$_.ResolutionState -eq "255" } | sort-object -property NetbiosComputerName | select NetbiosComputerName,TimeRaised | out-string
  # Gather Details section
  #$Details = get-scomagent | ? { $_.HealthState -eq "Success" } |fl DisplayName| out-string
  # Production
  
$Summary = get-SCOMAlert -name "PROACTIVE - Server restart pending detected" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName
$Summary.Count

# $PPSummary = get-SCOMAlert -name "PROACTIVE - Server NOT patched in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName | select NetbiosComputerName,TimeRaised | out-string
# $PRSummary = get-SCOMAlert -name "PROACTIVE - Server NOT rebooted in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName | select NetbiosComputerName,TimeRaised | out-string

$PRSummary = get-SCOMAlert -name "PROACTIVE - Server NOT rebooted in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName
$PRSummary.Count

$PPSummary = get-SCOMAlert -name "PROACTIVE - Server NOT patched in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName
$PPSummary.Count

$Alert = $Summary.Count + $PRSummary.Count + $PPSummary.Count
$Alert

# Turn into string
$Summary = $Summary | ft NetbiosComputerName,TimeRaised | out-string
$PPSummary = $PPSummary | ft NetbiosComputerName,TimeRaised | out-string
$PRSummary = $PRSummary | ft NetbiosComputerName,TimeRaised | out-string

# 
# Unhealthy/Maintenance mode agents
# 
  # Gather Details section
  # $Details = get-scomagent | ? { $_.HealthState -ne "Success" } | select DisplayName| out-string
  $Details
  
  $Class = (get-scomclass -Name "Microsoft.Windows.Computer" )
  $instance = ( $Class | ? { $_.Name -like "Microsoft.Windows.Computer" }  |Get-SCOMClassInstance )
  $MM = ($Instance | ? { $_.InMaintenanceMode -eq "True" }).DisplayName
    write-host "MM Maintenance mode Agents `n" ; $Unhealthy.InputObject
    $MaintM = $MM | sort | out-string
	
  $UnHealthyAgents = ( get-scomagent | ? { $_.HealthState -ne "Success" } ).DisplayName

  $Unhealthy = @()
  $Unhealthy += $UnHealthyAgents | sort | out-string

  #foreach ( $server in $UnHealthyAgents )
	#{
	#if ( ! $($MaintM | select-string $server) -eq $True ) 
		#{ 
		#write-host $server "is in Maintenance"
		#$Unhealthy += "$server"
		#}
	#}

  #$Unhealthy
  #$Details = $Unhealthy.InputObject
  
  $DownAgents = get-SCOMAlert | ? { ($_.Name -eq "Health Service Heartbeat Failure") `
	-OR ( $_.Name -eq "Failed to Connect to Computer" ) `
	-OR ( $_.Name -eq "System Center Management Health Service Unloaded System Rule(s)" ) `
	-OR ( $_.Name -eq "System Center Management Health Service Unable to Process New Configuration" ) `
	}   | ? { $_.ResolutionState -ne "255" }
  
  #$DownAgents
  #$DownAgents.count

  $Test = $Alert + $DownAgents.Count +   $Unhealthy.Count
  $Test 

  $Down = $DownAgents | select MonitoringObjectDisplayName,TimeRaised,Name | out-string
  $Down
   
  $PRMMMessage = @()

if ($Test -eq 0)
{  
	$PRMMMessage += ""
	$PRMMMessage += "ZERO Daily Server Pending Reboot alerts for ($date)."
	$PRMMMessage += ""
}

if ($Test -gt 0)
{
$PRMMMessage += ""
$PRMMMessage += "#"
$PRMMMessage += "# Alert Count = $Test"
$PRMMMessage += "#"
$PRMMMessage += "# Summary of Daily Server Pending Reboot alerts for ($date)"
$PRMMMessage += "#============================================================"
$PRMMMessage += "#"
$PRMMMessage += "# Servers pending reboot"
$PRMMMessage += "#=============================="
$PRMMMessage += $Summary
$PRMMMessage += ""
$PRMMMessage += "# Servers NOT patched in past 35 days"
$PRMMMessage += "#=============================="
$PRMMMessage += $PPSummary
$PRMMMessage += ""
$PRMMMessage += "# Servers NOT rebooted in past 35 days"
$PRMMMessage += "#=============================="
$PRMMMessage += $PRSummary
$PRMMMessage += ""
$PRMMMessage += "# Servers NOT monitored (agent down)"
$PRMMMessage += "#=============================="
$PRMMMessage += $Down
$PRMMMessage += $UnHealthyAgents 
$PRMMMessage += ""
$PRMMMessage += "# Servers in Maintenance Mode MM"
$PRMMMessage += "#=============================="
$PRMMMessage += $MaintM
$PRMMMessage += ""
$PRMMMessage += ""
$PRMMMessage += "DISCLAIMER: NOSC will not reboot servers in maintenance!"
$PRMMMessage += ""

$PRMMMessage

$PRMMMessage = $PRMMMessage | out-string
}


# Test for good/bad

IF ($Test -gt 0)
{
  $Result = "BAD"
  $Message = "Daily Server PROACTIVE Report has ($Test) pending reboot alerts for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of Daily Server Pending Reboot alerts for ($date). `n `n$PRMMMessage" )

    #  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message)
  $bag.AddValue('Summary',$PRMMMessage)
  $bag.AddValue('Details',$PRMMMessage)
  $bag.AddValue('MaintenanceMode',$MaintM)
  
}
ELSE
{
  $Result = "GOOD"
  $Message = "`n# Daily Server PROACTIVE Report has ZERO Pending reboot alerts for ($date). `n `n$PRMMMessage"

    #  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message)
  $bag.AddValue('Summary',$PRMMMessage)
  $bag.AddValue('Details',$PRMMMessage)
  $bag.AddValue('MaintenanceMode',$MaintM)
  
  $momapi.LogScriptEvent($ScriptName,$EventID,0, "`n# Daily Server PROACTIVE Report has ZERO Pending reboot alerts for ($date). `n `n$PRMMMessage")
}

# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.Alert.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>10:06</Start>
                        <End>10:25</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.Alert.Rule.Datasource.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather Pending Reboot Alerts, and alert daily
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.Alert.Rule.Datasource.v1024.ps1"
$EventID = "560"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"
 
# Resolution State 255 = closed
# Debug

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date). `n Number of alerts ($Test).")

# Pending reboots
#  Gather Summary section  
#   Debug
  
$Summary = get-SCOMAlert -name "PROACTIVE - Server restart pending detected" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName
$Summary.Count

$Alert = $Summary.Count  
$Alert

# Turn into string
$Summary = $Summary | ft NetbiosComputerName | out-string

$PRMMMessage = @()

if ($Alert -eq 0)
{  
	$PRMMMessage += ""
	$PRMMMessage += "ZERO Daily Server Pending Reboot alerts for ($date)."
	$PRMMMessage += ""
}

if ($Alert -gt 0)
{
	$PRMMMessage += ""
	$PRMMMessage += "# Daily Server Pending Reboot alerts for ($date)."
	$PRMMMessage += "#"
	$PRMMMessage += $Summary
	$PRMMMessage += ""
	$PRMMMessage = $PRMMMessage | out-string
}

$PRMMMessage




# Test for good/bad

IF ($Alert -ge 1)
{
  $Result = "BAD"
  $Message = "Daily Server PROACTIVE Report has ($Test) pending reboot alerts for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of Daily Server Pending Reboot ServerNames for ($date)." )

    #  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message)
  $bag.AddValue('Summary',$PRMMMessage)
  $bag.AddValue('Details',$PRMMMessage)
  $bag.AddValue('MaintenanceMode',$MaintM)
  
}
ELSE
{
  $Result = "GOOD"
  $Message = "`n# Daily Server PROACTIVE Report has ZERO Pending reboot alerts for ($date). `n `n$PRMMMessage"

    #  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message)
  $bag.AddValue('Summary',$PRMMMessage)
  $bag.AddValue('Details',$PRMMMessage)
  $bag.AddValue('MaintenanceMode',$MaintM)
  
  $momapi.LogScriptEvent($ScriptName,$EventID,0, "`n# Daily Server PROACTIVE Report has ZERO Pending reboot ServerNames for ($date)")
}

# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Alert.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>10:08</Start>
                        <End>10:25</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Alert.Rule.Datasource.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DailySummary report data for enterprise
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Alert.Rule.Datasource.v1024.ps1"
$EventID = "554"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

# Gather variables for all sections
#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"
 
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date).")

$DSMessage = "Proactive DailyTasks Daily Summary Alerts for date ($date)."
	#Proactive DailyTasks Daily Summary Alerts for date 
	# Daily Summary Alerts for date 
  
# $DSMessage


# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}
	

	
# Unhealthy Servers with performance issues in past 24 hours
#============================================================
$UnhealthyServerAlerts = get-scomalert | ? { ( $_.Name -eq "Memory Pages Per Second is too High." ) `
	-OR ( $_.Name -eq "Percentage of Committed Memory in Use is too high" ) `
	-OR ( $_.Name -eq "System Center Management Health Service Unloaded System Rule(s)" ) `
	-OR ( $_.Name -eq "Total CPU Utilization Percentage is too high" ) `
	-OR ( $_.Name -eq "WMI is unhealthy" ) `
	} | ? { ( $_.TimeRaised -ge $Time ) -AND ( $_.ResolutionState -ne 255 ) }

$UnhealthyServerAlerts.Count

$Performance = $UnhealthyServerAlerts | sort -property NetbiosComputername -uniq | select NetbiosComputerName,TimeRaised,Name | out-string
$Performance


# Figure out Remedy tickets	for report
#date
$AllRemedyTix = get-scomalert | ? { ($_.TicketID -ne $null ) -AND ( $_.TimeRaised -gt $Time ) }
#$AllRemedyTix = $AllRemedyTix | select NetBiosComputerName,TicketID,TimeRaised,Name,Description -auto
# date

#
# Open Remedy Tickets
# date
$RemedyTix = $AllRemedyTix | ? { ($_.ResolutionState -ne "255" ) `
	}
#date
# $RemedyTix = get-scomalert | ? { ( $_.TicketID -ne $null ) `
#	-AND ( $_.ResolutionState -ne "255") `
#	-AND ( $_.TimeRaised -gt $Time ) 
#	}

$Tickets = @()

$Tickets += "Closed alerts with same alert name" 

foreach ($alert in ($RemedyTix.Name |sort -uniq) )
	{
	$alert
	$Tickets += $alert
	$Tickets += ""
	$Tickets +=	$($AllRemedyTix | ? { ( $_.Name -eq $alert ) } ).Count
	$Tickets +=	$AllRemedyTix | ? { ( $_.Name -eq $alert ) } | sort -property Name | select TicketID,NetbiosComputername,Name
	$Tickets += "#============================================================" 
	}

$Tickets = $Tickets | out-string

$OpenTix = $RemedyTix | select NetBiosComputerName,TicketID,TimeRaised,Name
$OpenTix  | out-string
  
$UHSAMessage = @()
if ( $UnhealthyServerAlerts.Count -eq 0 )
	{
	$UHSAMessage += "ZERO Server Performance issues in past 24 hours"
	}

if ( $UnhealthyServerAlerts.Count -gt 0 )
	{
	$UHSAMessage += ""
	$UHSAMessage += "# Server Performance issues exist on servers below (in UTC)"
	$UHSAMessage += "#============================================================"
	$UHSAMessage += $Performance
	$UHSAMessage += ""
	}

if ( $RemedyTix.Count -eq 0 )
	{
	$UHSAMessage += ""
	$UHSAMessage += "ZERO Remedy Tickets since last report run"	
	$UHSAMessage += ""
	}

if ( $RemedyTix.Count -gt 0 )
	{
	$UHSAMessage += ""
	$UHSAMessage += "# Open issues with Remedy tickets"
	$UHSAMessage += "#============================================================"
	$UHSAMessage += $OpenTix
	$UHSAMessage += "#============================================================"
	$UHSAMessage += "#"
	$UHSAMessage += "# Details from past tickets"
	$UHSAMessage += "#============================================================"

	if ( $AllRemedyTix.Count -lt 10 )
		{
		$UHSAMessage += $Tickets
		$UHSAMessage += ""
		}
	if ( $AllRemedyTix.Count -gt 10 )
		{
		$UHSAMessage += "More than ten (10) open tickets"
		#$UHSAMessage +=$Tickets
		$UHSAMessage += ""
		}
		
	$UHSAMessage
	}

$UHSAMessage
$UHSAMessage = $UHSAMessage | out-string


# Disabled section as included in SCOMAdmin
#===============================================
# Unhealthy Agents
# Agents with alert counts in past 24 hours
#===============================================

#$UnhealthyAgentAlerts = get-scomalert | ? { ($_.Name -eq "Workflow Initialization: Failed to start a workflow that runs a process or script") `
#	-OR ( $_.Name -eq "Workflow Initialization: Failed to start a workflow that queries WMI" ) `
#	-OR ( $_.Name -eq "System Rules Unloaded" ) `
#	-OR ( $_.Name -eq "Scheduler Data Source Module Failed Initialization" ) `
#	-OR ( $_.Name -eq "Service Check Probe Module Failed Execution" ) `
#	-OR ( $_.Name -eq "Power Shell Script failed to run" ) `
#	-OR ( $_.Name -eq "Power Shell Run space Failed to start" ) `
#	-OR ( $_.Name -eq "Alert generation was temporarily suspended due to too many alerts." ) `
#	-OR ( $_.Name -eq "Consolidator Module Failed Initialization" ) `
#	-OR ( $_.Name -eq "Correlation Module Failed Initialization" ) `
#	-OR ( $_.Name -eq "Expression Filter Module Failed Initialization" ) `
#	-OR ( $_.Name -eq "Workflow Runtime: Failed to run a process or script" ) `
#	-OR ( $_.Name -eq "Workflow Runtime: Failed to run a WMI query" ) `
#	-OR ( $_.Name -eq "Power Shell script was dropped" ) `
#	} | ? { $_.TimeRaised -ge $Time } 

#if ( $UnhealthyAgentAlerts.Count -gt 0 )
#{
#$UHAAMessage = @()
#$UHAAMessage += ""
#$UHAAMessage += "# Servers NOT being monitored correctly"
#$UHAAMessage += "#======================================"
#$UHAAMessage += "# Contain SCOM Agent workflow/powershell/WMI/service checks that alert with failures"
#$UHAAMessage += "#==================================================================="

#foreach ( $Server in ($UnhealthyAgentAlerts.NetBiosComputerName | sort -unique ) )
# {
# $Server
# $Alerts = (($UnhealthyAgentAlerts.NetBiosComputerName) | ? { $_ -eq $server } ).Count
# $UHAAMessage += "Server ($Server) has ($Alerts) alerts"
# }

# Unhealthy Agent alert details

#$UHAAMessage += ""
#$UHAAMessage += "# Unhealthy Agent alert details"
#$UHAAMessage += "#=============================="
#$UHAAMessage += $UnhealthyAgentAlerts | select NetBiosComputerName,TimeRaised,Name | out-string
#$UHAAMessage += ""
#$UHAAMessage

# $UHAAMessage = $UHAAMessage | out-string
# }
 
 

#=============================================== 
#
# Pending Reboot
#
#===============================================

# Resolution State 255 = closed
# Debug
#$Test = (get-SCOMAlert -name "Monitor Alert - Server pending restart detected" | ? {$_.ResolutionState -eq "255" }).Count
#$Test = (get-SCOMAlert -name "PROACTIVE - Server restart pending detected" | ? {$_.ResolutionState -eq "255" }).Count
# Prod
#$Test = (get-SCOMAlert -name "PROACTIVE - Server restart pending detected" | ? {$_.ResolutionState -ne "255" }).Count

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date). `n Number of alerts ($Test).")

# Pending reboots
#  Gather Summary section  
#   Debug
  #$Summary = get-SCOMAlert -name "Monitor Alert - Server pending restart detected" | ? {$_.ResolutionState -eq "255" } | sort-object -property NetbiosComputerName | select NetbiosComputerName,TimeRaised | out-string
  # Gather Details section
  #$Details = get-scomagent | ? { $_.HealthState -eq "Success" } |fl DisplayName| out-string
  # Production

  
$Summary = get-SCOMAlert -name "PROACTIVE - Server restart pending detected" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName
$Summary.Count

# $PPSummary = get-SCOMAlert -name "PROACTIVE - Server NOT patched in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName | select NetbiosComputerName,TimeRaised | out-string
# $PRSummary = get-SCOMAlert -name "PROACTIVE - Server NOT rebooted in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName | select NetbiosComputerName,TimeRaised | out-string

$PRSummary = get-SCOMAlert -name "PROACTIVE - Server NOT rebooted in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName
$PRSummary.Count

$PPSummary = get-SCOMAlert -name "PROACTIVE - Server NOT patched in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName
$PPSummary.Count

$Alert = $Summary.Count + $PRSummary.Count + $PPSummary.Count
$Alert


# Turn into string
$Summary = $Summary | select NetbiosComputerName,TimeRaised | out-string
$PPSummary = $PPSummary | select NetbiosComputerName,TimeRaised | out-string
$PRSummary = $PRSummary | select NetbiosComputerName,TimeRaised | out-string

  

# 
# Unhealthy/Maintenance mode agents
# 
  # Gather Details section
  # $Details = get-scomagent | ? { $_.HealthState -ne "Success" } | select DisplayName| out-string
  #$Details
  
  $Class = (get-scomclass -Name "Microsoft.Windows.Computer" )
  $instance = ( $Class | ? { $_.Name -like "Microsoft.Windows.Computer" }  |Get-SCOMClassInstance )

  $MM = ($Instance | ? { $_.InMaintenanceMode -eq "True" }).DisplayName
	write-host "MM Maintenance mode Agents `n" ; $Unhealthy.InputObject
    $MaintM = $MM | sort | out-string
	
  $UnHealthyAgents = get-scomagent | ? { ( $_.HealthState -eq "Uninitialized" ) }

  # Debug
  $UnHealthyAgents.Count
  

# Check MM count
 if ( $MM.Count -gt 0 )
	{
	$CompareMM = compare-object -ReferenceObject $MM -DifferenceObject $UnhealthyAgents
	}



  #foreach ( $server in $UnHealthyAgents )
	#{
	#if ( ! $($MaintM | select-string $server) -eq $True ) 
		#{ 
		#write-host $server "is in Maintenance"
		#$Unhealthy += "$server"
		#}
	#}

  #$Unhealthy
  #$Details = $Unhealthy.InputObject

 
# Check for repeatedly down agents

$DownAgentsAlerts = get-SCOMAlert | ? { ($_.Name -eq "Health Service Heartbeat Failure") `
	-OR ( $_.Name -eq "Failed to Connect to Computer" ) `
	-OR ( $_.Name -eq "System Center Management Health Service Unloaded System Rule(s)") `
	-OR ( $_.Name -eq "System Center Management Health Service Unable to Process New Configuration" ) `
	}

$DownAgentsAlerts.Count
#$DownAgentsAlerts.MonitoringObjectDisplayName | sort -uniq
	
$DownAgentsOpenTime = $DownAgentsAlerts | ? { $_.TimeRaised -gt $Time } | ? { $_.ResolutionState -ne "255"}
$DownAgentsClosedTime = $DownAgentsAlerts | ? { $_.TimeRaised -gt $Time } | ? { $_.ResolutionState -eq "255"}

$DownAgentsOpenTime.MonitoringObjectDisplayName | sort -uniq
$DownAgentsClosedTime.MonitoringObjectDisplayName | sort -uniq

#Get SCOM agents in grey state
# From blog 
# https://www.powershellbros.com/get-list-unhealthy-scom-agents-grey-state-using-powershell/
$Agent = Get-SCOMClass -Name Microsoft.Windows.Computer
$Objects = Get-SCOMMonitoringObject -class:$Agent | Where-Object {$_.IsAvailable -eq $false}
  
$Monitored = $Objects | ? { $_.AvailabilityLastModified -gt $Time } | sort -property DisplayName -uniq `
	| ? { $_.InMaintenanceMode -ne $True } 
	#| ft AvailabilityLastModified,DisplayName -auto

$Monitored.DisplayName

# Display list of agents/servers and when modified
$Monitored | select AvailabilityLastModified,DisplayName

$NotMonitored = $Objects | ? { $_.AvailabilityLastModified -lt $Time } | sort -property DisplayName -uniq `
	| ? { $_.InMaintenanceMode -ne $True }


# foreach to see unique agents NOT monitored, NOT in maintenance
$NOTinMaintenance = @()

foreach ( $server in $UnHealthyAgents.DisplayName)
	{
	if ( ($MM | select-object $server ) -eq $true ) 
		{
		write-host "Server $($server) in Maintenance Mode"
		#$NOTinMaintenance += $server
		}
	else
		{
		$NOTinMaintenance += $server
		}
	}
 
 
$RepeatDownAgents = @()
$CurrentDownAgents = @()


# Compare repeated agent down
if ( $DownAgentsOpenTime.Count -eq 0 )
	{
	$RepeatDownAgents += ""
	$RepeatDownAgents += "ZERO Repeated down agents as of report run"
	$RepeatDownAgents += ""
	}	
	
if ( $DownAgentsOpenTime.Count -gt 0 )
	{
	# Display list of agents/servers and when modified
	$Monitored | select AvailabilityLastModified,DisplayName
	If ( $Monitored.Count -gt 0 )
		{
		foreach ( $server in $Monitored.DisplayName) 
			{
			$CurrentDownCompare = $DownAgentsOpenTime.MonitoringObjectDisplayName | select-string -simplematch $server
			if ( $CurrentDownCompare.Count -gt 0 )
				{
				$CurrentDownAgents += $server
				}
			$RepeatCount = $NotMonitored.DisplayName | select-string -simplematch $server
			$RepeatCount
			if ( $RepeatCount.Count -gt 0 )
				{
				$RepeatDownAgents += $server
				}
			}
		}
	}

$RepeatDownAgents
  $RepeatDownAgents.Count
$CurrentDownAgents
  $CurrentDownAgents.Count


$UniqOldDownAgentsArray = @()

if ( $RepeatDownAgents.Count -le 3 )
	{
	$UniqOldDownAgentsArray += "ZERO Repeatcount check NOT monitored servers as of report run"
	}

if ( $RepeatDownAgents.Count -gt 3 )
	{
	foreach ( $server in $RepeatDownAgents )
		{
		$TestConnectivity = test-netconnection -ComputerName $server -port 5723
		if ( $TestConnectivity.TcpTestSucceeded -eq $False )
			{
			$UniqOldDownAgentsArray += "$server fails TCP5723 connectivity"
			}
		}

	$UniqOldDownAgentsArray += ""
	$UniqOldDownAgentsArray += "Verify Microsoft Monitoring Agent is installed, and healthservice running via 'get-service healthservice'"
	$UniqOldDownAgentsArray += ""

	#$UniqOldDownAgentsArray = $UniqOldDownAgentsArray | out-string

	$UniqOldDownAgentsArray
	}
	
	# Fails for DC's
	#
	#if ( $TestConnectivity.PingSucceeded -eq "False" )
	#	{
	#	$UniqOldDownAgentsArray += "SCOM cannot ping $server, contact network team to resolve firewall issue"
	#	}
	#}



# Analyze down agents
if ( $DownAgents.Count -eq 0 )
	{
	$Compare = $MM.Count + $CompareMM.Count
    $CompareDown = "ZERO NOT monitored servers as of report run"
	}
	
if ( $DownAgents.Count -gt 0 )
	{
    if ( $UnHealthyAgents.count -gt 0 )
		{
		$CompareDown = compare-object -ReferenceObject $DownAgents -DifferenceObject $UnhealthyAgents
		# Format output of DownAgents
		$Down = $DownAgents | select MonitoringObjectDisplayName,TimeRaised,Name | out-string
		$Down
		}
    if ( $UnHealthyAgents.count -eq 0 )
		{
		$Down = $DownAgents | select MonitoringObjectDisplayName | out-string
		$Down
		}
	}


# Compare Unhealthy agents
$Unhealthy = @()
	
if ( $UnHealthyAgents.Count -eq 0 )
	{
	#$Unhealthy += ""
	$Unhealthy += "ZERO NOT healthy agents as of report run"
	}
	
if ( $UnHealthyAgents.Count -gt 0 )
	{
	#$Unhealthy += ""
	$Unhealthy += $UnHealthyAgents.DisplayName | sort -uniq # | out-string
	#$Unhealthy += ""
	}
	
  $Test = $DownAgents.Count + $UnHealthyAgents.Count
  $Test


# Update to consolidate all the methods into a unique list
#===========================================================
$TotalAgentIssues = @()
$TotalAgentIssues += $DownAgents
if ( $DownAgentsOpenTime.Count -gt 0 )
	{
	$TotalAgentIssues += $RepeatDownAgents
	}
$TotalAgentIssues += $Unhealthy
$TotalAgentIssues += $Monitored.DisplayName
$TotalAgentIssues += $NotMonitored.DisplayName

# Display $TotalAgentIssues | sort -uniq
$TotalAgentIssues = $TotalAgentIssues | sort -uniq

# Debug
$TotalAgentIssues
# $CompareMM
# $Compare


# Build report
$UnhealthyAgents = @()

if ( $TotalAgentIssues.Count -eq 0)
	{
	$UnhealthyAgents += "ZERO NOT monitored servers for date ($date)."
	$UnhealthyAgents += ""
	}
	
if ( $TotalAgentIssues.Count -gt 0)
	{
	$UnhealthyAgents += ""
	$UnhealthyAgents += "# NOT monitored servers = $($TotalAgentIssues.Count)"
	$UnhealthyAgents += "# Configured Servers in Maintenance Mode MM = $($MaintM.Count)"
	$UnhealthyAgents += "#================================================"
	$UnhealthyAgents += ""
	$UnhealthyAgents += "# NOT monitored server detail"
	$UnhealthyAgents += "#============================"
	if ( $TotalAgentIssues.Count -lt 28)
		{
		$UnhealthyAgents += $TotalAgentIssues
		}
	if ( $TotalAgentIssues.Count -gt 28)
		{
		$UnhealthyAgents += "MORE than 25 servers NOT monitored"
		}
	$UnhealthyAgents += "#=================================================="
	$UnhealthyAgents += ""
	$UnhealthyAgents += "DISCLAIMER: NOSC will not reboot servers in maintenance!"
	$UnhealthyAgents += ""
	}

$UnhealthyAgents = 	$UnhealthyAgents | out-string
$UnhealthyAgents


#
# Pending patches, restarts, NOT patched in x days   

# Create array
$PRMMMessage = @()

if ($Alert -eq 0)
{  
	$PRMMMessage += ""
	$PRMMMessage += "ZERO Daily Server Pending Reboot alerts for ($date)."
	$PRMMMessage += ""
}

if ($Alert -gt 0)
	{
	$PRMMMessage += ""
	$PRMMMessage += "#"
	$PRMMMessage += "# Alert Count = $Alert"
	$PRMMMessage += "#"
	$PRMMMessage += "# Summary of Daily Server Pending Reboot alerts for ($date)"
	$PRMMMessage += "#============================================================"
	$PRMMMessage += "#"
	$PRMMMessage += "# Servers pending reboot"
	$PRMMMessage += "#=============================="
	$PRMMMessage += $Summary
	$PRMMMessage += ""
	$PRMMMessage += "# Servers NOT patched in past 35 days"
	$PRMMMessage += "#=============================="
	$PRMMMessage += $PPSummary
	$PRMMMessage += ""
	$PRMMMessage += "# Servers NOT rebooted in past 35 days"
	$PRMMMessage += "#=============================="
	$PRMMMessage += $PRSummary
	$PRMMMessage += ""
	}

$PRMMMessage = $PRMMMessage | out-string

$PRMMMessage


#===============================================
#
# Logical Disk free space alerts
#===============================================

$LDSTest = get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -ne "255" }
$LDSTest

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Logical disk Free space Alerts for date ($date).")

  # Production
  $LDSSummary = get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -ne "255" } | select NetbiosComputerName,MonitoringObjectName,Parameters | out-string
  # Gather Details section
  $LDSDetails = get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -ne "255" }| fl NetbiosComputerName,MonitoringObjectName,Parameters,Description | out-string

  $LDSSummary
  write-host ""
  $LDSDetails

  $LDSMessage = @()

if ( $LDSTest.Count -eq 0 )
{
	$LDSMessage += "ZERO Logical Disk free space alerts for ($date)."
}
  
if ( $LDSTest.Count -gt 0 )
{
$LDSMessage += ""
$LDSMessage += "# Summary of Daily Logical Disk free space alerts for ($date)"
$LDSMessage += "#============================================================"
$LDSMessage += "#"
$LDSMessage += "# Logical Disk Free Space alerts"
$LDSMessage += "#=============================="
$LDSMessage += $LDSSummary
$LDSMessage += ""
$LDSMessage += "# Alert details"
$LDSMessage += "#=============================="
$LDSMessage += $LDSDetails
$LDSMessage += ""
$LDSMessage = $LDSMessage | out-string
}

$LDSMessage
write-host ""



 
 
#===============================================
# Expiring certificates
# Certificates about to expire/expired
#===============================================

$ExpCert = get-scomalert | ? { ($_.Name -eq "Certificate lifespan alert" ) } | ? { $_.ResolutionState -eq 0 }

$EXPAMessage = @()

if ( $ExpCert.Count -eq 0 )
{
$EXPAMessage += "ZERO PKI Certificates about to expire for ($date)."
}

if ( $ExpCert.Count -gt 0 )
{
$EXPAMessage += ""
$EXPAMessage += "# Certificates about to expire/expired"
$EXPAMessage += "#============================================================"
$EXPAMessage += $ExpCert | select NetBiosComputerName,Parameters | out-string
$EXPAMessage += ""
#$EXPAMessage += "# Certificate details"
#$EXPAMessage += "#=============================="
#$EXPAMessage += $ExpCert |fl NetBiosComputerName,Parameters,Context | out-string
$EXPAMessage += ""

$EXPAMessage

$EXPAMessage = $EXPAMessage | out-string
}


#============================================================
#
# DC Key/important alerts
#============================================================
$DCAlerts = get-scomalert | ? { ($_.Name -eq "The Infrastructure Master Ping Availability health monitor has failed." ) `
	-OR ($_.Name -eq "The Infrastructure Master LDAP Bind Availability health monitor has failed." ) `
	-OR ($_.Name -eq "The PDC LDAP Bind Availability health monitor has failed." ) `
	-OR ($_.Name -eq "The PDC Ping Availability health monitor has failed." ) `
	-OR ($_.Name -eq "The RID Master LDAP Bind Availability health monitor has failed." ) `
	-OR ($_.Name -eq "The RID Master Ping Availability health monitor has failed." ) `
	-OR ($_.Name -eq "Domain System Volume (SYSVOL) Share Not Available" ) `
	-OR ($_.Name -eq "The LSASS process has exceeded the processor utilization threshold over multiple samples." ) `
	-OR ($_.Name -eq "The total number of ATQ threads in use has exceeded one or more thresholds over multiple samples." ) `
	-OR ($_.Name -eq "The Replication Consistency health monitor has failed." ) `
	-OR ($_.Name -eq "AD Trust Monitor health monitor has failed." ) `
	-OR ($_.Name -eq "Replication Partner Count health monitor has failed." ) `
	-OR ($_.Name -eq "DCLocator test failed to locate a domain controller." ) `
	-OR ($_.Name -eq "The Global Catalog Search Availability script has failed." ) `
	-OR ($_.Name -eq "The Time Skew monitor has failed." ) `
	-OR ($_.Name -eq "The LDAP Bind Time health monitor has exceeded one or more thresholds." ) `
	-OR ($_.Name -eq "The Network Adapters DNS Servers health monitor has failed." ) `
	-OR ($_.Name -eq "Active Directory Web Services Not Running" ) `
	-OR ($_.Name -eq "AD Lost and Found Object health monitor has failed." ) `
	-OR ($_.Name -eq "AD Show Replication Check health monitor has failed." ) `
	-OR ($_.Name -eq "AD Site Availability Health Degraded." ) `
 	-OR ($_.Name -eq "AD Domain Availability Health Degraded." ) `
	-OR ($_.Name -eq "AD Site Performance Health Degraded." ) `
	} | ? { ( $_.TimeRaised -ge $Time ) }

$DCACount = $DCAlerts.Count

$DCAMessage = @()

if ( $DCACount -eq 0 )
{
$DCAMessage += "ZERO DC Alerts for role failures, SysVol, LSASS, Replication related alerts for ($date)."	
}

if ( $DCACount -gt 0 )
{
write-host -f yellow "`n# Servers with more than 5 alerts"
$DCAMessage += "# DC Alerts"
$DCAMessage += "#"
$DCAMessage += "# Alert Count = $DCACount"
$DCAMessage += "#"
$DCAMessage += "# NOTE: DC role failures,SysVol,LSASS, Replication related Alerts"
$DCAMessage += "#============================================================"
$DCAMessage += "#"
#$DCAMessage += "# Servers with more than 5 alerts"
#$DCAMessage += "#================================"

# Disable if noisy environment
#foreach ( $Server in ($DCAlerts.NetBiosComputerName | sort -unique ) )
# {
# $Server
# $Alerts = (($DCAlerts.NetBiosComputerName) | ? { $_ -eq $server } ).Count
# if ( $Alerts -gt 5 )
#	{
#	write-host -f yellow "Server ($Server) has ($Alerts)"
#	$DCAMessage += "Server ($Server) has ($Alerts) alerts"
#	}
# }

$DCAMessage += ""
$DCAMessage += "# DC Alert Details"
$DCAMessage += "#================================"

if ( $DCACount -lt 10 )
	{
	$DCAMessage += $DCAlerts |sort -unique | select TimeRaised,NetBiosComputerName,Name | out-string
 
	$DCAMessage += ""
	$DCAMessage = $DCAMessage | out-string
	}
if ( $DCACount -gt 10 )
	{
	$DCAMessage += "More than 10 unique DC's with alerts"
	#$DCAlerts |sort -unique | select TimeRaised,NetBiosComputerName,Name | out-string
 
	$DCAMessage += ""
	}
}

$DCAMessage
$DCAMessage = $DCAMessage | out-string



#============================================================
#
# DNS Alerts
#============================================================
$DNSAlerts = get-scomalert | ? { ($_.Name -eq "Windows DNS - NSLookup Failed for Zone's NS Record" ) `
	-OR ($_.Name -eq "Windows DNS - Conditional Forward Forwarder - All IP Addresses Failing NSLookup" ) `
	-OR ($_.Name -eq "Windows DNS - NSLookup Failed Against a Local Address" ) `
	-OR ($_.Name -eq "Windows DNS - WMI Validation Failed" ) `
	-OR ($_.Name -eq "Windows DNS - Active Directory Integrated Interface Error" ) `
	-OR ($_.Name -eq "Windows DNS - Active Directory Record Load Failed" ) `
	-OR ($_.Name -eq "Windows DNS - Active Directory Integrated Write Failed" ) `
	-OR ($_.Name -eq "Windows DNS - Socket Failure" ) `
	-OR ($_.Name -eq "Windows DNS - Configuration - Open Socket For Address" ) `
	-OR ($_.Name -eq "Windows DNS - Active Directory Integrated Zone Conflict" ) `
	-OR ($_.Name -eq "Windows DNS - Active Directory Integrated Zone Operation Failed" ) `
	-OR ($_.Name -eq "Windows DNS 2016 and 1709+ - Detect Unused Zone" ) `
	} | ? { $_.TimeRaised -ge $Time }

$DNSACount = $DNSAlerts.Count

$DNSAMessage = @()

if ( $DNSACount -eq 0 )
{
	$DNSAMessage += "ZERO DNS alerts for ($date)."
}

	
if ( $DNSACount -gt 0 )
{
write-host -f yellow "`n# Servers with more than 5 alerts"
$DNSAMessage = @()
$DNSAMessage += ""
$DNSAMessage += "Alert Count = $DNSACount"
$DNSAMessage += ""
$DNSAMessage += "# DNS Alerts"
$DNSAMessage += "#============================================================"
$DNSAMessage += ""
#$DNSAMessage += "# Servers with more than 5 alerts"
#$DNSAMessage += "#================================"

#foreach ( $Server in ($DNSAlerts.NetBiosComputerName | sort -unique ) )
# {
# $Server
# $Alerts = (($DNSAlerts.NetBiosComputerName) | ? { $_ -eq $server } ).Count
# if ( $Alerts -gt 5 )
#	{
#	write-host -f yellow "Server ($Server) has ($Alerts)"
#	$DNSAMessage += "Server ($Server) has ($Alerts) alerts"
#	}
# }

#$DNSAMessage += ""
$DNSAMessage += "# DNS Alert Details"
$DNSAMessage += "#================================"
$DNSAMessage += $DNSAlerts |sort -unique | select TimeRaised,NetBiosComputerName,Name | out-string
$DNSAMessage += ""
$DNSAMessage = $DNSAMessage | out-string
}

$DNSAMessage



# Group Policy issues
#============================================================
$GPAlerts = get-scomalert | ? { ($_.Name -eq "Group Policy Client Service Not Running" ) `
	-OR ( $_.Name -eq "The Group Policy Update health monitor has failed." ) `
	} | ? { ( $_.TimeRaised -ge $Time ) } 

write-host -f yellow "`n# Servers with Group policy alerts"

$GPAMessage = @()

if ( $GPAlerts.Count -eq 0 )
{
	$GPAMessage = "ZERO Group Policy alerts for ($date)."
}

if ( $GPAlerts.Count -gt 0 )
{

$GPAlertCount = ($GPAlerts.NetBiosComputerName | sort -uniq).Count

$GPAMessage += ""
$GPAMessage += "# Group Policy"
$GPAMessage += "#============================================================"
$GPAMessage += "#"
$GPAMessage += "# Number of Group Policy alerts = $($GPAlerts.Count)"
$GPAMessage += "#"
$GPAMessage += "# Server count with Group policy alerts = $($GPAlertCount)"
$GPAMessage += "#================================="
$GPAMessage += "# See ADDS alert report for details and breakout of GPO issues"
$GPAMessage += ""


#foreach ( $Server in ($GPAlerts.NetBiosComputerName | sort -unique ) )
# {
# $Server
# $Alerts = (($GPAlerts.NetBiosComputerName) | ? { $_ -eq $server } ).Count
# $GPAMessage += "Server ($Server) has ($Alerts) alerts"
# }

# Group Policy alert details

#$GPAMessage += ""
#$GPAMessage += "# Group policy alert details"
#$GPAMessage += "#==========================="
#$GPAMessage += $GPAlerts | select NetBiosComputerName,TimeRaised,Name | out-string
#$GPAMessage += ""
#$GPAMessage = $GPAMessage | out-string
}

$GPAMessage

$GPAMessage = $GPAMessage | out-string


#============================================================
#
# Tally up all the property bags for datasource

$Result = "GOOD"
  
# Log 
$Summary = "# $DSMessage`n `n$UHSAMessage `n `n$UnhealthyAgents`n `n$PRMMMessage`n `n$LDSMessage`n `n$EXPAMessage`n `n$DCAMessage`n `n$DNSAMessage`n `n$GPAMessage`n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"

write-host "End of Debug"
write-host " "

$Summary

write-host " "
write-host "Writing 555 Event ID for summary variable"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# $DSMessage`n `n$UHSAMessage`n$PRMMMessage `n$LDSMessage `n$EXPAMessage `n$DCAMessage `n$DNSAMessage `n$GPAMessage `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode")

  $bag.AddValue('Message',$DSMessage)
  $bag.AddValue('Summary',$Summary)


# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Alert.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>11:30</Start>
                        <End>11:55</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.Report.Script.Alert.Rule.Datasource.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DailySummary report data for enterprise
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.Report.Script.Alert.Rule.Datasource.v1024.ps1"
$EventID = "558"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================

 
# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather SCOM Admin Alerts for date ($date).")
$DSMessage = "Proactive Daily Summary SCOM Admin Alerts for date ($date)."


#
# Clean up old reports
#===============================================
$OldReports = get-scomalert | ? { ( $_.Name -like "NG.DailyTasks McAfee*" ) `
	-OR ( $_.Name -like "NG DailyTasks*" ) `
	-OR ( $_.Name -like "NG McAfee*" ) `
	-OR ( $_.Name -like "NG Tangible*" ) `
	-OR ( $_.Name -like "Proactive DailyTasks*" ) `
	-OR ( $_.Name -like "Proactive DC NetLogon*" ) `
	-OR ( $_.Name -like "Proactive NOSC DailyTasks*" ) `
	-OR ( $_.Name -eq "Proactive Tanium EventID7031 Rule Alert" ) `
	-OR ( $_.Name -like "Proactive DailyTasks*" ) `
	-OR ( $_.Name -like "Proactive McAfee*" ) `
	} | ? { $_.ResolutionState -ne 255 }

$OldReports = $OldReports | ? { $_.TimeRaised -ge $Time } 
$OldReports.count

if ( $OldReports.Count -gt 0 )
	{
	$OldReports | ? { ( $_.Name -notlike "NG McAfee*" ) -AND ( $_.Name -notlike "NG Tangible*" ) } `
	| set-scomalert -ResolutionState 255
	}

# Add ATQ ticket ID
# The total number of ATQ threads in use has exceeded one or more thresholds over multiple samples.
$ATQ = get-scomalert | ? { ( $_.Name -eq "The total number of ATQ threads in use has exceeded one or more thresholds over multiple samples." ) `
	-AND ( $_.TimeRaised -gt $Time ) `
	-AND ( $_.ResolutionState -ne 255 ) `
	}

if ( $ATQ.count -gt 0 )
	{
	$ATQ = $ATQ | set-scomalert -TicketID 3298691 -ResolutionState 248
	}
	
#===============================================
# Unhealthy Agents
# Agents with alert counts in past 24 hours
#===============================================

$UnhealthyAgentAlerts = get-scomalert | ? { ( $_.Name -eq "Alert generation was temporarily suspended due to too many alerts." ) `
	-OR ( $_.Name -eq "Agent errors for over-utilized server" ) `
	-OR ( $_.Name -eq "ATA Gateway Service Monitor Service Alert" ) `
	-OR ( $_.Name -eq "DNS Reconnaissance Suspicious Activity" ) `
	-OR ( $_.Name -eq "Failed to send notification using server/device" ) `
	-OR ( $_.Name -eq "Gateway Low Memory Monitoring Alert" ) `
	-OR ( $_.Name -eq "Gateway Overloaded Network Activities Monitoring Alert" ) `
	-OR ( $_.Name -eq "Monitor Generated Alerts Have been Manually Closed" ) `
	-OR ( $_.Name -eq "MSSQL on Windows: Monitoring Pool Alert Collection" ) `
	-OR ( $_.Name -eq "MSSQL on Windows: SQL Server has failed to allocate sufficient memory to run the query" ) `
	-OR ( $_.Name -eq "Power Shell Script failed to run" ) `
	-OR ( $_.Name -eq "Remote Execution Suspicious Activity" ) `
	-OR ( $_.Name -eq "SAMR Reconnaissance Suspicious Activity" ) `
	-OR ( $_.Name -eq "Consolidator Module Failed Initialization" ) `
	-OR ( $_.Name -eq "Correlation Module Failed Initialization" ) `
	-OR ( $_.Name -eq "Expression Filter Module Failed Initialization" ) `
	-OR ( $_.Name -eq "Workflow Runtime: Failed to run a process or script" ) `
	-OR ( $_.Name -eq "Workflow Runtime: Failed to run a WMI query" ) `
	} | ? { $_.ResolutionState -ne "255"}  | ? { $_.TimeRaised -gt $Time }




# 
# Set up array for unhealthy agent report
$UHAAMessage = @()

if ( $UnhealthyAgentAlerts.Count -eq 0 )
{
	$UHAAMessage += "ZERO Unhealthy Agent alerts for date ($date)."
}
	
if ( $UnhealthyAgentAlerts.Count -gt 0 )
	{
	$UHAAMessage += ""
	$UHAAMessage += $DSMessage
	$UHAAMessage += ""
	$UHAAMessage += "# Auto-closed report rule alerts = $($OldReports.Count)"
	$UHAAMessage += "# Auto-closed monitors = $($UnhealthyMonitors.Count)"
	$UHAAMessage += "# Auto-closed rules = $($SCOMAdminRulesToClose.Count)"
	$UHAAMessage += ""
	$UHAAMessage += "# Servers NOT being monitored correctly"
	$UHAAMessage += "#======================================"
	$UHAAMessage += "# Contain SCOM Agent workflow/powershell/WMI/service checks that alert with failures"
	$UHAAMessage += "#==================================================================================="

	
	foreach ( $Server in ($UnhealthyAgentAlerts.NetBiosComputerName | sort -unique ) )
	{
	$Server
	$Alerts = (($UnhealthyAgentAlerts.NetBiosComputerName) | ? { $_ -eq $server } ).Count
	$UHAAMessage += "Server $($Server) has $($Alerts) alerts"
	}

	$UHAAMessage += ""
	$UHAAMessage += "# Unhealthy Agent alert details"
	$UHAAMessage += "#=============================="
	$UHAAMessage += $UnhealthyAgentAlerts | select NetBiosComputerName,TimeRaised,Name
	$UHAAMessage += "#=============================="
	$UHAAMessage += ""
	}

	$UHAAMessage 
	
	$UHAAMessage = $UHAAMessage | out-string
	
	$UHAAMessage 
	
	

# Reset Monitors Script
# Put ps1 in mgmtpacks folder
# https://sc.scomurr.com/scom-2012-monitor-reset-cleaning-up-the-environment/
#	Download
# https://gallery.technet.microsoft.com/SCOM-2012-Batch-reset-63a17534
	
#Alternate
#https://gallery.technet.microsoft.com/scriptcenter/Auto-reset-script-for-d8b775ca

$SCOMAdminMonitorsToAutoClose = @()

# SCOMAdmin Alerts to auto-close
  # Monitors
$SCOMAdminMonitorsToAutoClose += "Alert Subscription Availability Monitor"
$SCOMAdminMonitorsToAutoClose += "ATA Gateway Service Monitor"

#
# Create Array for all the unhealthy monitors
$UnhealthyMonitors = @()

if ( $Test -gt 0 )
{
foreach ($MonitorDisplayName in $SCOMAdminMonitorsToAutoClose)
	{
	$Monitors = @(Get-SCOMMonitor -displayname $MonitorDisplayName)

	# Set up monitor objects to reset
		
	foreach ($Monitor in $Monitors)
		{
		$MonitorClass = Get-SCOMClass -Id $Monitor.Target.Id
		write-host ""
		write-host "Monitor Class = " + $MonitorClass
		$ActiveMonitors = Get-SCOMClassInstance -Class $MonitorClass | ? { ($_.healthstate -ne 'Success') -AND ( $_.healthstate -ne 'Uninitialized') -AND ($_.IsAvailable -eq $true) }
		$UnhealthyMonitors += $ActiveMonitors.Count
		$ActiveMonitors.Count
		write-host "Found" + $ActiveMonitors.Count + "active monitors."
		write-host ""
		if ( $ActiveMonitors.Count -gt 0)
			{
			foreach ($ActiveMonitor in $ActiveMonitors)
				{
				write-host " Resetting Health State on '" +$ActiveMonitor.FullName + "'" 
				$ActiveMonitor.ResetMonitoringState($Monitor.ID)
				}
			}
		}
	}
}
	

#============================================================
#
# Clean up/Resolve open alerts

#
# (Rules) Set array for closing rules
$SCOMAdminRulesToClose = @()

$SCOMAdminRulesToClose = get-scomalert | ? { ( $_.Name -eq "Alert generation was temporarily suspended due to too many alerts." ) `
	-OR ( $_.Name -eq "	Alert on Failure to Create PowerShell Run space for Power Shell Script" ) `
	-OR ( $_.Name -eq "Agent errors for over-utilized server" ) `
	-OR ( $_.Name -eq "DNS Reconnaissance Suspicious Activity" ) `
	-OR ( $_.Name -eq "Failed to send notification using server/device" ) `
	-OR ( $_.Name -eq "Gateway Low Memory Monitoring Alert" ) `
	-OR ( $_.Name -eq "Gateway Overloaded Network Activities Monitoring Alert" ) `
	-OR ( $_.Name -eq "Monitor Generated Alerts Have been Manually Closed" ) `
	-OR ( $_.Name -eq "MSSQL on Windows: Monitoring Pool Alert Collection" ) `
 	-OR ( $_.Name -eq "MSSQL on Windows: SQL Server has failed to allocate sufficient memory to run the query" ) `
	-OR ( $_.Name -like "NG.DailyTasks McAfee*" ) `	
	-OR ( $_.Name -like "NG DailyTasks*" ) `
	-OR ( $_.Name -like "NG McAfee*" ) `
	-OR ( $_.Name -like "NG Tangible*" ) `
	-OR ( $_.Name -like "Proactive DailyTasks*" ) `
	-OR ( $_.Name -like "Proactive DC NetLogon*" ) `
	-OR ( $_.Name -like "Proactive NOSC DailyTasks*" ) `
	-OR ( $_.Name -eq "Proactive Tanium EventID7031 Rule Alert" ) `
	-OR ( $_.Name -eq "Power Shell Script failed to run" ) `
	-OR ( $_.Name -eq "Remote Execution Suspicious Activity" ) `
	-OR ( $_.Name -eq "SAMR Reconnaissance Suspicious Activity" ) `
	} | ? { $_.ResolutionState -ne "255"}  | ? { $_.TimeRaised -gt $Time }

$SCOMAdminRulesToClose.Count

if ( $SCOMAdminRulesToClose.Count -gt 0 )
	{
	$SCOMAdminRulesToClose | Set-SCOMAlert -ResolutionState 255
	}

	




#============================================================
#
# Tally up all the property bags for datasource

$Result = "GOOD"
  
# Log 
$Summary = "$UHAAMessage `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"$UHAAMessage`n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode")

  $bag.AddValue('Message',$DSMessage)
  $bag.AddValue('Summary',$Summary)


# Return all bags
$bag


#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>11:35</Start>
                        <End>11:55</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule.Datasource.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather LongRunning scripts since last report run
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule.Datasource.v1024.ps1"
$EventID = "540"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================

 
# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}


$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather SCOM Admin Alerts for date ($date).")
$DSMessage = "Proactive DailyTasks SCOMAdmin Long running scripts report for date ($date)."


# Set up arrays
$RuntimeSeconds = @()
$RS = @()
$RuntimeTotal = @()
$LongRunningDetail = @()
$LongRunningReport = @()


# Gather scripts to check since last report
# Debug (40s on one env)
# date
$LongRunning  = get-eventlog -LogName "Operations Manager" -Source "Health Service Script" -after $Time `
	| ? { ( $_.EventID -gt "540" ) -AND ( $_.EventID -lt "620" ) } `
	| ? { $_.Message -like "*Script Runtime:*" } `
	| ? { ( $_.EventID -ne "570" ) -AND ( $_.EventID -ne "560" ) -AND ( $_.EventID -ne "561" ) -AND ( $_.EventID -ne "562" ) `
	}
	#| fl TimeGenerated,Message
# date

# Debug
$LongRunning.Count
$RuntimeTotal = @()

if ( $LongRunning.Count -gt 0 )
	{
	foreach ($LLine in $LongRunning.Message)
		{
		$Lmatch = $LLine |select-string -pattern ':'
		if ($Lmatch)
			{
			# Debug
			#$Lmatch
			$LLineSplit = $LLine.Split(":")
			#$LLineSplit
			#$LLineSplit[1]; $LLineSplit[2]
			#$LLineSplit[2]
			$RuntimeSeconds = $LLineSplit[2].Split(".")
			#$RuntimeSeconds
			$RS = $RuntimeSeconds[0].Split("(")
			# Debug
			#$RS
			$RuntimeTotal += $RS
			}
		}
	}

# Clean up RuntimeTotal array
$RuntimeTotal = $RuntimeTotal.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq

# Debug to see $RuntimeTotal
#$RuntimeTotal
# Reset array
#$LongRunningDetail = @()

# Convert value to integer and evaluate
if ( $RuntimeTotal.Count -gt 0 )
	{
	foreach ( $Instance in $RuntimeTotal)
		{
		# Debug
		#$Instance
		$Int = [int]$Instance
		if ( $Int -gt "200" )
			{
			# Debug
			# $Int
			write-host "Long running script past 200 seconds or 3+ minutes after $Time "
			# Identify which script
			$LongRunningDetail += ($LongRunning | ? { $_.Message -like "*$Int*" }).Message
			}
		if ( $Int -lt "200" )
			{
			# Debug
			# $Int
			write-host "ZERO Long running scripts after $Time "
			}
		}
	}
	
$LongRunningDetail



# Create report
#==============================

# Check for alerts 
if ( $LongRunningDetail.Count -eq 0 )
	{
	$Message = "ZERO SCOMAdmin Long running scripts for date ($date)"
	$LongRunningReport += "ZERO SCOMAdmin Long running scripts for date ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}
	
if ( $LongRunningDetail.Count -gt 0 )
	{
	#
	# Create table output	

	#
	# Show ADDS alerts by Time Raised,NetBiosComputerName,Message
	#
	$LongRunningReport += ""
	$LongRunningReport += "# Proactive DailyTasks SCOMAdmin Long running scripts report for date $($date)"
	$LongRunningReport += "#"
	$LongRunningReport += "# SCOMAdmin Long running scripts = $($LongRunningDetail.count)"
	$LongRunningReport += "#"
	$LongRunningReport += "# Total Long running script details"
	$LongRunningReport += "#========================================================"
	$LongRunningReport += $LongRunningDetail | out-string
	$LongRunningReport += ""
	}

$LongRunningReport = $LongRunningReport | out-string
$LongRunningReport


#============================================================
#
# Tally up all the property bags for datasource

$Result = "GOOD"
  
# Log 
$Summary = "$LongRunningReport `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"$LongRunningReport`n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode")

  $bag.AddValue('Message',$DSMessage)
  $bag.AddValue('Summary',$Summary)


# Return all bags
$bag


#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>11:38</Start>
                        <End>11:58</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagProbe">
                <ScriptName>Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule.Datasource.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather ScriptError scripts since last report run
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule.Datasource.v1024.ps1"
$EventID = "540"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather SCOM Admin ScriptErrors for date ($date).")
$DSMessage = "Proactive DailyTasks SCOMAdmin ScriptErrors report for date ($date)."


# Set up arrays
$RuntimeSeconds = @()
$RS = @()
$RuntimeTotal = @()
$ScriptErrorsDetail = @()
$ScriptErrorsReport = @()


# Gather scripts to check since last report
# Debug (40s on one env)
# date
$ScriptErrors  = get-eventlog -LogName "Operations Manager" -Source "Health Service Modules" -after $Time `
	| ? { ( $_.EventID -eq "22406" ) `
	-OR ( $_.EventID -eq "31551" ) `
	-OR ( $_.EventID -eq "31552" ) `
	-OR ( $_.EventID -eq "31553" ) `
	-OR ( $_.EventID -eq "31557" ) `
	-OR ( $_.EventID -eq "31561" ) `
	-OR ( $_.EventID -eq "31563" ) `
	}
	#| fl TimeGenerated,Message
$ScriptErrors.Count


# Breakdown of events
#=========================================

# Operations Manager Event ID 31551
#===================================
# Unable to connect to SQL$ScriptErrors
$SQLConnectErrors =  $ScriptErrors | ? { ( $_.Message -like "*Could not open a connection to SQL Server*" ) `
	}
$SQLConnectErrors.Count

# View details, Network related connection failures from MS > SQL$SQLConnectErrors
$SQLConnectErrors | sort -property Message -uniq | ft TimeGenerated,EventId,Message -auto -wrap
$SQLConnectErrors.Message | select -last 1

# Table Access errors
$TableAccess = $ScriptErrors | ? { ( $_.EventID -eq "31551" ) } | sort -property Message -uniq | ? { $_.Message -like "*Cannot access destination table*" }
$TableAccess.Count

# View details
#$TableAccess | sort -property Message -uniq | ft TimeGenerated,EventId,Message -auto -wrap


# DataWarehouse Timeout Stored Procedures
$DWTimeOutSP = $ScriptErrors | ? { ( $_.EventID -eq "31551" ) } | sort -property Message -uniq | ? { $_.Message -like "*Timed out stored procedure*" }
$DWTimeOutSP.Count

# View details
#$DWTimeOutSP | sort -property Message -uniq | ft TimeGenerated,EventId,Message -auto -wrap


# Registry tuning required for SQL inserts
$RegTuningRequired = $ScriptErrors | ? { ( $_.EventID -eq "31551" ) -AND ( $_.Message -like "*This timeout can be increased by adding a registry key*" ) } 
$RegTuningRequired.Count

# Display events
#$RegTuningRequired | sort -property Message -uniq | sort -property TimeGenerated -desc | ft TimeGenerated,EventId,Message -auto -wrap
# Display latest message
#$RegTuningRequired.Message | select -last 1

# Registry value on RMSe
get-itemproperty "HKLM:Software\Microsoft\Microsoft Operations Manager\3.0\Data Warehouse"


# Operations Manager Event ID 3155x-31569
#===================================

# DataWarehouse Timeout Stored Procedures
$DWTimeOutSP = $ScriptErrors | ? { $_.Message -like "*Timed out stored procedure*" } | sort -property TimeGenerated -desc
$DWTimeOutSP.Count

# Display events
#$DWTimeOutSP | sort -property TimeGenerated -uniq -desc | select TimeGenerated,EventId -last 1


# DataWarehouse pre-login handshake acknowledgement
# Gather ALL handshake failures
$Handshake = $ScriptErrors | ? { $_.Message -like "*pre-login handshake acknowledgement*" } | sort -property TimeGenerated -uniq -desc 
$Handshake.Count

# Display Events
#$Handshake | select TimeGenerated,EventID -last 1


# LoginFailed
$LoginFailed = $ScriptErrors | ? { $_.Message -like "*Login failed for user*" } | sort -property TimeGenerated -desc 
$LoginFailed.Count

# Display Events
#$LoginFailed| sort -property TimeGenerated -uniq -desc | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap


# Operations Manager Event ID 31553
#===================================
# Parallel execution errors on SQL Server
# $ParallelExecutionErrors = $ScriptErrors | ? { ( $_.EventID -eq "31553" ) }
$ParallelExecutionErrors = $ScriptErrors | ? { $_.Message -like "*parallel query execution*" }
$ParallelExecutionErrors.Count

# Display Uniq Events
#$ParallelExecutionErrors | sort -property Message -uniq | sort -property TimeGenerated -desc | ft TimeGenerated,EventId,Message -auto -wrap


# Look for 2115 events during same period of time as backlog may cause reports to fail
#$2115Errors	= get-eventlog -LogName "Operations Manager" -Source "HealthService" -after $Time `
#	| ? { ( $_.EventID -eq "2115" ) `
#	-OR ( $_.EventID -eq "8000" ) `
#	}
#$2115Errors.Count


# Remaining SQL errors
$RemainingScriptErrors = $ScriptErrors | ? { ( $_.Message -notlike "*Could not open a connection to SQL Server*" ) `
	-AND ( $_.Message -NOTlike "*Cannot access destination table*" ) `
	-AND ( $_.Message -NOTlike "*Timed out stored procedure*" ) `
	-AND ( $_.Message -NOTlike "*This timeout can be increased by adding a registry key*" ) `
	-AND ( $_.Message -NOTlike "*pre-login handshake acknowledgement*" ) `
	-AND ( $_.Message -NOTlike "*Login failed for user*" ) `
	-AND ( $_.Message -NOTlike "*parallel query execution*" ) `
	}

$RemainingScriptErrors.Count

# Display Events
#$RemainingScriptErrors | sort -property TimeGenerated -desc | ft TimeGenerated,EventId,Message -auto -wrap



# Create report
#==============================
$ScriptErrorsReport = @()

# Check for alerts 
if ( $ScriptErrors.Count -eq 0 )
	{
	$Message = "ZERO Proactive DailyTasks SCOMAdmin ScriptErrors report for date ($date)"
	$ScriptErrorsReport += "ZERO Proactive DailyTasks SCOMAdmin ScriptErrors report for date ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}
	
if ( $ScriptErrors.Count -gt 0 )
	{
	#
	# Create table output	

	#
	# Show ADDS alerts by Time Raised,NetBiosComputerName,Message
	#
	$ScriptErrorsReport += ""
	$ScriptErrorsReport += "Proactive DailyTasks SCOMAdmin ScriptErrors report for date $($date)"
	$ScriptErrorsReport += "#"
	$ScriptErrorsReport += "# Alerts since last run = $($ScriptErrors.count)"
	$ScriptErrorsReport += "#"
	$ScriptErrorsReport += "# Breakdown of alerts"
	$ScriptErrorsReport += "#========================================================"
	$ScriptErrorsReport += "# 'Cannot access destination table' alerts = $($TableAccess.Count)"
	$ScriptErrorsReport += "# 'Could not open a connection to SQL Server' alerts = $($SQLConnectErrors.Count)"
	$ScriptErrorsReport += "# 'Login failed for user' alerts = $($LoginFailed.Count)"
	$ScriptErrorsReport += "# 'Network pre-login handshake failure' alerts = $($Handshake.Count)" 	
	$ScriptErrorsReport += "# 'parallel query execution' alerts = $($ParallelExecutionErrors.Count)"	
 	$ScriptErrorsReport += "# 'This timeout can be increased by adding a registry key' alerts = $($RegTuningRequired.Count)"
 	$ScriptErrorsReport += "# 'Timed out stored procedure' alerts = $($DWTimeOutSP.Count)"
	$ScriptErrorsReport += "#"
 	$ScriptErrorsReport += "# Remaining Script error alerts = $($RemainingScriptErrors.Count)"
	$ScriptErrorsReport += "#================================================================"
	$ScriptErrorsReport += "#"
	$ScriptErrorsReport += "#"
 	$ScriptErrorsReport += "# Breakdown of events - most will be single (one or 1 ) event details"
	$ScriptErrorsReport += "#===================================================================="

if ( $TableAccess.Count -gt 0 )
	{
	$ScriptErrorsReport += "# Cannot access destination table detail"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $TableAccess | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap
	$ScriptErrorsReport += ""
	}

if ( $SQLConnectErrors.Count -gt 0 )
	{
	$ScriptErrorsReport += "# SCOM to SQL Connect Error"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $SQLConnectErrors.Message | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap
	$ScriptErrorsReport += ""
	}

if ( $LoginFailed.Count -gt 0 )
	{
	$ScriptErrorsReport += "# Login failed"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $LoginFailed| sort -property TimeGenerated -uniq -desc | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap
	$ScriptErrorsReport += ""
	}

if ( $Handshake.Count -gt 0 )
	{
	$ScriptErrorsReport += "# Network pre-login handshake failure"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $Handshake | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap
	$ScriptErrorsReport += ""
	}

if ( $ParallelExecutionErrors -gt 0 )
	{
	$ScriptErrorsReport += "# Parallel execution error"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $ParallelExecutionErrors | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap
	$ScriptErrorsReport += ""
	}
	
if ( $RegTuningRequired.Count -gt 0 )
	{
	$ScriptErrorsReport += "# This timeout can be increased by adding a registry key"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $RegTuningRequired | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap
	$ScriptErrorsReport += ""
	$ScriptErrorsReport += "# Current Registry settings:"
	$ScriptErrorsReport += get-itemproperty "HKLM:Software\Microsoft\Microsoft Operations Manager\3.0\Data Warehouse"
	$ScriptErrorsReport += ""
	}
	
if ( $DWTimeOutSP.Count -gt 0 )
	{
	$ScriptErrorsReport += "# Timed out stored procedure"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $DWTimeOutSP | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap
	$ScriptErrorsReport += ""
	}

if ( $RemainingScriptErrors.Count -gt 0 )
	{
	$ScriptErrorsReport += "# Remaining Script Error"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $RemainingScriptErrors | sort -property TimeGenerated -desc | ft TimeGenerated,EventId,Message -auto -wrap
	$ScriptErrorsReport += ""
	$ScriptErrorsReport += ""
	}
	
	}

$ScriptErrorsReport

$ScriptErrorsReport = $ScriptErrorsReport | out-string
$ScriptErrorsReport


#============================================================
#
# Tally up all the property bags for datasource

$Result = "GOOD"
  
# Log 
$Summary = "$ScriptErrorsReport `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"$ScriptErrorsReport`n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode")

  $bag.AddValue('Message',$DSMessage)
  $bag.AddValue('Summary',$Summary)


# Return all bags
$bag


#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
</ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>

      <WriteActionModuleType ID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.WA.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather Logical Disk Free space is low monitors and alert daily
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.WA.v1024.ps1"
$EventID = "551"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"
 
# Resolution State 255 = closed
# Debug
#$Test = (get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -eq "255" }).Count
# Prod
$Test = (get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -ne "255" }).Count
$Test

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date). `n Number of alerts ($Test).")

IF ($Test -ge 1)
{
  $Result = "BAD"
  $Message = "Daily Logical Disk Free space report has ($Test) alerts for ($date)"

  write-host ""
  $Result
  write-host ""
  $Message
  write-host ""
  
  # Gather Summary section  
  # Debug
  #$Summary = get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -eq "255" } |select NetbiosComputerName,MonitoringObjectName,Parameters | out-string
  # Gather Details section
  #$Details = get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -eq "255" }| fl NetbiosComputerName,MonitoringObjectName,Parameters,Description | out-string
  # Production
  $Summary = get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -ne "255" } | select NetbiosComputerName,MonitoringObjectName,Parameters | out-string
  # Gather Details section
  $Details = get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -ne "255" }| fl NetbiosComputerName,MonitoringObjectName,Parameters,Description | out-string

  $Summary
  write-host ""
  $Details
  
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of Daily Logical Disk free space alerts for ($date). `n `n Summary of alerts `n $Summary `n Alert Details $Details")

  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message)
  $bag.AddValue('Summary',$Summary)
  $bag.AddValue('Details',$Details)
   
}
ELSE
{
  $Result = "GOOD"
  $Message = "Daily Logical Disk Free space report has ZERO alerts for ($date)"

  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message) 
  $bag.AddValue('Summary',$Summary)
  $bag.AddValue('Details',$Details)
  
  $momapi.LogScriptEvent($ScriptName,$EventID,0, "`n Daily Logical Disk Free space report has ZERO alerts for ($date)" )
}

# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.WA.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather Pending Reboot Alerts and alert daily
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.WA.v1024.ps1"
$EventID = "553"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"
 
# Resolution State 255 = closed
# Debug
#$Test = (get-SCOMAlert -name "Monitor Alert - Server pending restart detected" | ? {$_.ResolutionState -eq "255" }).Count
#$Test = (get-SCOMAlert -name "PROACTIVE - Server restart pending detected" | ? {$_.ResolutionState -eq "255" }).Count
# Prod
#$Test = (get-SCOMAlert -name "PROACTIVE - Server restart pending detected" | ? {$_.ResolutionState -ne "255" }).Count

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date). `n Number of alerts ($Test).")

# Pending reboots
#  Gather Summary section  
#   Debug
  #$Summary = get-SCOMAlert -name "Monitor Alert - Server pending restart detected" | ? {$_.ResolutionState -eq "255" } | sort-object -property NetbiosComputerName | select NetbiosComputerName,TimeRaised | out-string
  # Gather Details section
  #$Details = get-scomagent | ? { $_.HealthState -eq "Success" } |fl DisplayName| out-string
  # Production
  
$Summary = get-SCOMAlert -name "PROACTIVE - Server restart pending detected" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName
$Summary.Count

# $PPSummary = get-SCOMAlert -name "PROACTIVE - Server NOT patched in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName | select NetbiosComputerName,TimeRaised | out-string
# $PRSummary = get-SCOMAlert -name "PROACTIVE - Server NOT rebooted in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName | select NetbiosComputerName,TimeRaised | out-string

$PRSummary = get-SCOMAlert -name "PROACTIVE - Server NOT rebooted in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName
$PRSummary.Count

$PPSummary = get-SCOMAlert -name "PROACTIVE - Server NOT patched in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName
$PPSummary.Count

$Alert = $Summary.Count + $PRSummary.Count + $PPSummary.Count
$Alert

# Turn into string
$Summary = $Summary | ft NetbiosComputerName,TimeRaised | out-string
$PPSummary = $PPSummary | ft NetbiosComputerName,TimeRaised | out-string
$PRSummary = $PRSummary | ft NetbiosComputerName,TimeRaised | out-string

# 
# Unhealthy/Maintenance mode agents
# 
  # Gather Details section
  # $Details = get-scomagent | ? { $_.HealthState -ne "Success" } | select DisplayName| out-string
  $Details
  
  $Class = (get-scomclass -Name "Microsoft.Windows.Computer" )
  $instance = ( $Class | ? { $_.Name -like "Microsoft.Windows.Computer" }  |Get-SCOMClassInstance )
  $MM = ($Instance | ? { $_.InMaintenanceMode -eq "True" }).DisplayName
    write-host "MM Maintenance mode Agents `n" ; $Unhealthy.InputObject
    $MaintM = $MM | sort | out-string
	
  $UnHealthyAgents = ( get-scomagent | ? { $_.HealthState -ne "Success" } ).DisplayName

  $Unhealthy = @()
  $Unhealthy += $UnHealthyAgents | sort | out-string

  #foreach ( $server in $UnHealthyAgents )
	#{
	#if ( ! $($MaintM | select-string $server) -eq $True ) 
		#{ 
		#write-host $server "is in Maintenance"
		#$Unhealthy += "$server"
		#}
	#}

  #$Unhealthy
  #$Details = $Unhealthy.InputObject
  
  $DownAgents = get-SCOMAlert | ? { ($_.Name -eq "Health Service Heartbeat Failure") `
	-OR ( $_.Name -eq "Failed to Connect to Computer" ) `
	-OR ( $_.Name -eq "System Center Management Health Service Unloaded System Rule(s)" ) `
	-OR ( $_.Name -eq "System Center Management Health Service Unable to Process New Configuration" ) `
	}   | ? { $_.ResolutionState -ne "255" }
  
  #$DownAgents
  #$DownAgents.count

  $Test = $Alert + $DownAgents.Count +   $Unhealthy.Count
  $Test 

  $Down = $DownAgents | select MonitoringObjectDisplayName,TimeRaised,Name | out-string
  $Down
   
  $PRMMMessage = @()

if ($Test -eq 0)
{  
	$PRMMMessage += ""
	$PRMMMessage += "ZERO Daily Server Pending Reboot alerts for ($date)."
	$PRMMMessage += ""
}

if ($Test -gt 0)
{
$PRMMMessage += ""
$PRMMMessage += "#"
$PRMMMessage += "# Alert Count = $Test"
$PRMMMessage += "#"
$PRMMMessage += "# Summary of Daily Server Pending Reboot alerts for ($date)"
$PRMMMessage += "#============================================================"
$PRMMMessage += "#"
$PRMMMessage += "# Servers pending reboot"
$PRMMMessage += "#=============================="
$PRMMMessage += $Summary
$PRMMMessage += ""
$PRMMMessage += "# Servers NOT patched in past 35 days"
$PRMMMessage += "#=============================="
$PRMMMessage += $PPSummary
$PRMMMessage += ""
$PRMMMessage += "# Servers NOT rebooted in past 35 days"
$PRMMMessage += "#=============================="
$PRMMMessage += $PRSummary
$PRMMMessage += ""
$PRMMMessage += "# Servers NOT monitored (agent down)"
$PRMMMessage += "#=============================="
$PRMMMessage += $Down
$PRMMMessage += $UnHealthyAgents 
$PRMMMessage += ""
$PRMMMessage += "# Servers in Maintenance Mode MM"
$PRMMMessage += "#=============================="
$PRMMMessage += $MaintM
$PRMMMessage += ""
$PRMMMessage += ""
$PRMMMessage += "DISCLAIMER: NOSC will not reboot servers in maintenance!"
$PRMMMessage += ""

$PRMMMessage

$PRMMMessage = $PRMMMessage | out-string
}


# Test for good/bad

IF ($Test -gt 0)
{
  $Result = "BAD"
  $Message = "Daily Server PROACTIVE Report has ($Test) pending reboot alerts for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of Daily Server Pending Reboot alerts for ($date). `n `n$PRMMMessage" )

    #  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message)
  $bag.AddValue('Summary',$PRMMMessage)
  $bag.AddValue('Details',$PRMMMessage)
  $bag.AddValue('MaintenanceMode',$MaintM)
  
}
ELSE
{
  $Result = "GOOD"
  $Message = "`n# Daily Server PROACTIVE Report has ZERO Pending reboot alerts for ($date). `n `n$PRMMMessage"

    #  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message)
  $bag.AddValue('Summary',$PRMMMessage)
  $bag.AddValue('Details',$PRMMMessage)
  $bag.AddValue('MaintenanceMode',$MaintM)
  
  $momapi.LogScriptEvent($ScriptName,$EventID,0, "`n# Daily Server PROACTIVE Report has ZERO Pending reboot alerts for ($date). `n `n$PRMMMessage")
}

# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.WA.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather Pending Reboot Alerts and alert daily
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.WA.v1024.ps1"
$EventID = "559"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"
 
# Resolution State 255 = closed
# Debug

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date). `n Number of alerts ($Test).")

# Pending reboots
#  Gather Summary section  
#   Debug
  
$Summary = get-SCOMAlert -name "PROACTIVE - Server restart pending detected" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName
$Summary.Count

$Alert = $Summary.Count  
$Alert

# Turn into string
$Summary = $Summary | ft NetbiosComputerName | out-string

$PRMMMessage = @()

if ($Alert -eq 0)
{  
	$PRMMMessage += ""
	$PRMMMessage += "ZERO Daily Server Pending Reboot alerts for ($date)."
	$PRMMMessage += ""
}

if ($Alert -gt 0)
{
	$PRMMMessage += ""
	$PRMMMessage += "# Daily Server Pending Reboot alerts for ($date)."
	$PRMMMessage += "#"
	$PRMMMessage += $Summary
	$PRMMMessage += ""
	$PRMMMessage = $PRMMMessage | out-string
}

$PRMMMessage




# Test for good/bad

IF ($Alert -ge 1)
{
  $Result = "BAD"
  $Message = "Daily Server PROACTIVE Report has ($Test) pending reboot alerts for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of Daily Server Pending Reboot ServerNames for ($date)." )

    #  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message)
  $bag.AddValue('Summary',$PRMMMessage)
  $bag.AddValue('Details',$PRMMMessage)
  $bag.AddValue('MaintenanceMode',$MaintM)
  
}
ELSE
{
  $Result = "GOOD"
  $Message = "`n# Daily Server PROACTIVE Report has ZERO Pending reboot alerts for ($date). `n `n$PRMMMessage"

    #  $bag.AddValue('Result',$Result)
  $bag.AddValue('Count',$Test)
  $bag.AddValue('Message',$Message)
  $bag.AddValue('Summary',$PRMMMessage)
  $bag.AddValue('Details',$PRMMMessage)
  $bag.AddValue('MaintenanceMode',$MaintM)
  
  $momapi.LogScriptEvent($ScriptName,$EventID,0, "`n# Daily Server PROACTIVE Report has ZERO Pending reboot ServerNames for ($date)")
}

# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.NOSC.DailyTasks.DailySummary.Report.Script.WA.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DailySummary report data for enterprise
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.DailySummary.Report.Script.WA.v1024.ps1"
$EventID = "555"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

# Gather variables for all sections
#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"
 
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date).")

$DSMessage = "Proactive DailyTasks Daily Summary Alerts for date ($date)."
	#Proactive DailyTasks Daily Summary Alerts for date 
	# Daily Summary Alerts for date 
  
# $DSMessage


# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}
	

	
# Unhealthy Servers with performance issues in past 24 hours
#============================================================
$UnhealthyServerAlerts = get-scomalert | ? { ( $_.Name -eq "Memory Pages Per Second is too High." ) `
	-OR ( $_.Name -eq "Percentage of Committed Memory in Use is too high" ) `
	-OR ( $_.Name -eq "System Center Management Health Service Unloaded System Rule(s)" ) `
	-OR ( $_.Name -eq "Total CPU Utilization Percentage is too high" ) `
	-OR ( $_.Name -eq "WMI is unhealthy" ) `
	} | ? { ( $_.TimeRaised -ge $Time ) -AND ( $_.ResolutionState -ne 255 ) }

$UnhealthyServerAlerts.Count

$Performance = $UnhealthyServerAlerts | sort -property NetbiosComputername -uniq | select NetbiosComputerName,TimeRaised,Name | out-string
$Performance


# Figure out Remedy tickets	for report
#date
$AllRemedyTix = get-scomalert | ? { ($_.TicketID -ne $null ) -AND ( $_.TimeRaised -gt $Time ) }
#$AllRemedyTix = $AllRemedyTix | select NetBiosComputerName,TicketID,TimeRaised,Name,Description -auto
# date

#
# Open Remedy Tickets
# date
$RemedyTix = $AllRemedyTix | ? { ($_.ResolutionState -ne "255" ) `
	}
#date
# $RemedyTix = get-scomalert | ? { ( $_.TicketID -ne $null ) `
#	-AND ( $_.ResolutionState -ne "255") `
#	-AND ( $_.TimeRaised -gt $Time ) 
#	}


$Tickets = @()

$Tickets += "Closed alerts with same alert name" 

foreach ($alert in ($RemedyTix.Name |sort -uniq) )
	{
	$alert
	$Tickets += $alert
	$Tickets += ""
	$Tickets +=	$($AllRemedyTix | ? { ( $_.Name -eq $alert ) } ).Count
	$Tickets +=	$AllRemedyTix | ? { ( $_.Name -eq $alert ) } | sort -property Name | select TicketID,NetbiosComputername,Name
	$Tickets += "#============================================================" 
	}

$Tickets = $Tickets | out-string

$OpenTix = $RemedyTix | select NetBiosComputerName,TicketID,TimeRaised,Name
$OpenTix  | out-string
  
$UHSAMessage = @()
if ( $UnhealthyServerAlerts.Count -eq 0 )
	{
	$UHSAMessage += "ZERO Server Performance issues in past 24 hours"
	}

if ( $UnhealthyServerAlerts.Count -gt 0 )
	{
	$UHSAMessage += ""
	$UHSAMessage += "# Server Performance issues exist on servers below (in UTC)"
	$UHSAMessage += "#============================================================"
	$UHSAMessage += $Performance
	$UHSAMessage += ""
	}

if ( $RemedyTix.Count -eq 0 )
	{
	$UHSAMessage += ""
	$UHSAMessage += "ZERO Remedy Tickets since last report run"	
	$UHSAMessage += ""
	}

if ( $RemedyTix.Count -gt 0 )
	{
	$UHSAMessage += ""
	$UHSAMessage += "# Open issues with Remedy tickets"
	$UHSAMessage += "#============================================================"
	$UHSAMessage += $OpenTix
	$UHSAMessage += "#============================================================"
	$UHSAMessage += "#"
	$UHSAMessage += "# Details from past tickets"
	$UHSAMessage += "#============================================================"

	if ( $AllRemedyTix.Count -lt 10 )
		{
		$UHSAMessage += $Tickets
		$UHSAMessage += ""
		}
	if ( $AllRemedyTix.Count -gt 10 )
		{
		$UHSAMessage += "More than ten (10) open tickets"
		#$UHSAMessage +=$Tickets
		$UHSAMessage += ""
		}
		
	$UHSAMessage
	}

$UHSAMessage
$UHSAMessage = $UHSAMessage | out-string


# Disabled section as included in SCOMAdmin
#===============================================
# Unhealthy Agents
# Agents with alert counts in past 24 hours
#===============================================

#$UnhealthyAgentAlerts = get-scomalert | ? { ($_.Name -eq "Workflow Initialization: Failed to start a workflow that runs a process or script") `
#	-OR ( $_.Name -eq "Workflow Initialization: Failed to start a workflow that queries WMI" ) `
#	-OR ( $_.Name -eq "System Rules Unloaded" ) `
#	-OR ( $_.Name -eq "Scheduler Data Source Module Failed Initialization" ) `
#	-OR ( $_.Name -eq "Service Check Probe Module Failed Execution" ) `
#	-OR ( $_.Name -eq "Power Shell Script failed to run" ) `
#	-OR ( $_.Name -eq "Power Shell Run space Failed to start" ) `
#	-OR ( $_.Name -eq "Alert generation was temporarily suspended due to too many alerts." ) `
#	-OR ( $_.Name -eq "Consolidator Module Failed Initialization" ) `
#	-OR ( $_.Name -eq "Correlation Module Failed Initialization" ) `
#	-OR ( $_.Name -eq "Expression Filter Module Failed Initialization" ) `
#	-OR ( $_.Name -eq "Workflow Runtime: Failed to run a process or script" ) `
#	-OR ( $_.Name -eq "Workflow Runtime: Failed to run a WMI query" ) `
#	-OR ( $_.Name -eq "Power Shell script was dropped" ) `
#	} | ? { $_.TimeRaised -ge $Time } 

#if ( $UnhealthyAgentAlerts.Count -gt 0 )
#{
#$UHAAMessage = @()
#$UHAAMessage += ""
#$UHAAMessage += "# Servers NOT being monitored correctly"
#$UHAAMessage += "#======================================"
#$UHAAMessage += "# Contain SCOM Agent workflow/powershell/WMI/service checks that alert with failures"
#$UHAAMessage += "#==================================================================="

#foreach ( $Server in ($UnhealthyAgentAlerts.NetBiosComputerName | sort -unique ) )
# {
# $Server
# $Alerts = (($UnhealthyAgentAlerts.NetBiosComputerName) | ? { $_ -eq $server } ).Count
# $UHAAMessage += "Server ($Server) has ($Alerts) alerts"
# }

# Unhealthy Agent alert details

#$UHAAMessage += ""
#$UHAAMessage += "# Unhealthy Agent alert details"
#$UHAAMessage += "#=============================="
#$UHAAMessage += $UnhealthyAgentAlerts | select NetBiosComputerName,TimeRaised,Name | out-string
#$UHAAMessage += ""
#$UHAAMessage

# $UHAAMessage = $UHAAMessage | out-string
# }
 
 

#=============================================== 
#
# Pending Reboot
#
#===============================================

# Resolution State 255 = closed
# Debug
#$Test = (get-SCOMAlert -name "Monitor Alert - Server pending restart detected" | ? {$_.ResolutionState -eq "255" }).Count
#$Test = (get-SCOMAlert -name "PROACTIVE - Server restart pending detected" | ? {$_.ResolutionState -eq "255" }).Count
# Prod
#$Test = (get-SCOMAlert -name "PROACTIVE - Server restart pending detected" | ? {$_.ResolutionState -ne "255" }).Count

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date). `n Number of alerts ($Test).")

# Pending reboots
#  Gather Summary section  
#   Debug
  #$Summary = get-SCOMAlert -name "Monitor Alert - Server pending restart detected" | ? {$_.ResolutionState -eq "255" } | sort-object -property NetbiosComputerName | select NetbiosComputerName,TimeRaised | out-string
  # Gather Details section
  #$Details = get-scomagent | ? { $_.HealthState -eq "Success" } |fl DisplayName| out-string
  # Production

  
$Summary = get-SCOMAlert -name "PROACTIVE - Server restart pending detected" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName
$Summary.Count

# $PPSummary = get-SCOMAlert -name "PROACTIVE - Server NOT patched in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName | select NetbiosComputerName,TimeRaised | out-string
# $PRSummary = get-SCOMAlert -name "PROACTIVE - Server NOT rebooted in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName | select NetbiosComputerName,TimeRaised | out-string

$PRSummary = get-SCOMAlert -name "PROACTIVE - Server NOT rebooted in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName
$PRSummary.Count

$PPSummary = get-SCOMAlert -name "PROACTIVE - Server NOT patched in past month" | ? {$_.ResolutionState -ne "255" } | sort-object -property NetbiosComputerName
$PPSummary.Count

$Alert = $Summary.Count + $PRSummary.Count + $PPSummary.Count
$Alert


# Turn into string
$Summary = $Summary | select NetbiosComputerName,TimeRaised | out-string
$PPSummary = $PPSummary | select NetbiosComputerName,TimeRaised | out-string
$PRSummary = $PRSummary | select NetbiosComputerName,TimeRaised | out-string

  

# 
# Unhealthy/Maintenance mode agents
# 
  # Gather Details section
  # $Details = get-scomagent | ? { $_.HealthState -ne "Success" } | select DisplayName| out-string
  #$Details
  
  $Class = (get-scomclass -Name "Microsoft.Windows.Computer" )
  $instance = ( $Class | ? { $_.Name -like "Microsoft.Windows.Computer" }  |Get-SCOMClassInstance )

  $MM = ($Instance | ? { $_.InMaintenanceMode -eq "True" }).DisplayName
	write-host "MM Maintenance mode Agents `n" ; $Unhealthy.InputObject
    $MaintM = $MM | sort | out-string
	
  $UnHealthyAgents = get-scomagent | ? { ( $_.HealthState -eq "Uninitialized" ) }

  # Debug
  $UnHealthyAgents.Count
  

# Check MM count
 if ( $MM.Count -gt 0 )
	{
	$CompareMM = compare-object -ReferenceObject $MM -DifferenceObject $UnhealthyAgents
	}



  #foreach ( $server in $UnHealthyAgents )
	#{
	#if ( ! $($MaintM | select-string $server) -eq $True ) 
		#{ 
		#write-host $server "is in Maintenance"
		#$Unhealthy += "$server"
		#}
	#}

  #$Unhealthy
  #$Details = $Unhealthy.InputObject

 
# Check for repeatedly down agents

$DownAgentsAlerts = get-SCOMAlert | ? { ($_.Name -eq "Health Service Heartbeat Failure") `
	-OR ( $_.Name -eq "Failed to Connect to Computer" ) `
	-OR ( $_.Name -eq "System Center Management Health Service Unloaded System Rule(s)") `
	-OR ( $_.Name -eq "System Center Management Health Service Unable to Process New Configuration" ) `
	}

$DownAgentsAlerts.Count
#$DownAgentsAlerts.MonitoringObjectDisplayName | sort -uniq
	
$DownAgentsOpenTime = $DownAgentsAlerts | ? { $_.TimeRaised -gt $Time } | ? { $_.ResolutionState -ne "255"}
$DownAgentsClosedTime = $DownAgentsAlerts | ? { $_.TimeRaised -gt $Time } | ? { $_.ResolutionState -eq "255"}

$DownAgentsOpenTime.MonitoringObjectDisplayName | sort -uniq
$DownAgentsClosedTime.MonitoringObjectDisplayName | sort -uniq

#Get SCOM agents in grey state
# From blog 
# https://www.powershellbros.com/get-list-unhealthy-scom-agents-grey-state-using-powershell/
$Agent = Get-SCOMClass -Name Microsoft.Windows.Computer
$Objects = Get-SCOMMonitoringObject -class:$Agent | Where-Object {$_.IsAvailable -eq $false}
  
$Monitored = $Objects | ? { $_.AvailabilityLastModified -gt $Time } | sort -property DisplayName -uniq `
	| ? { $_.InMaintenanceMode -ne $True } 
	#| ft AvailabilityLastModified,DisplayName -auto

$Monitored.DisplayName

# Display list of agents/servers and when modified
$Monitored | select AvailabilityLastModified,DisplayName

$NotMonitored = $Objects | ? { $_.AvailabilityLastModified -lt $Time } | sort -property DisplayName -uniq `
	| ? { $_.InMaintenanceMode -ne $True }


# foreach to see unique agents NOT monitored, NOT in maintenance
$NOTinMaintenance = @()

foreach ( $server in $UnHealthyAgents.DisplayName)
	{
	if ( ($MM | select-object $server ) -eq $true ) 
		{
		write-host "Server $($server) in Maintenance Mode"
		#$NOTinMaintenance += $server
		}
	else
		{
		$NOTinMaintenance += $server
		}
	}
 
 
$RepeatDownAgents = @()
$CurrentDownAgents = @()


# Compare repeated agent down
if ( $DownAgentsOpenTime.Count -eq 0 )
	{
	$RepeatDownAgents += ""
	$RepeatDownAgents += "ZERO Repeated down agents as of report run"
	$RepeatDownAgents += ""
	}	
	
if ( $DownAgentsOpenTime.Count -gt 0 )
	{
	# Display list of agents/servers and when modified
	$Monitored | select AvailabilityLastModified,DisplayName
	If ( $Monitored.Count -gt 0 )
		{
		foreach ( $server in $Monitored.DisplayName) 
			{
			$CurrentDownCompare = $DownAgentsOpenTime.MonitoringObjectDisplayName | select-string -simplematch $server
			if ( $CurrentDownCompare.Count -gt 0 )
				{
				$CurrentDownAgents += $server
				}
			$RepeatCount = $NotMonitored.DisplayName | select-string -simplematch $server
			$RepeatCount
			if ( $RepeatCount.Count -gt 0 )
				{
				$RepeatDownAgents += $server
				}
			}
		}
	}

$RepeatDownAgents
  $RepeatDownAgents.Count
$CurrentDownAgents
  $CurrentDownAgents.Count


$UniqOldDownAgentsArray = @()

if ( $RepeatDownAgents.Count -le 3 )
	{
	$UniqOldDownAgentsArray += "ZERO Repeatcount check NOT monitored servers as of report run"
	}

if ( $RepeatDownAgents.Count -gt 3 )
	{
	foreach ( $server in $RepeatDownAgents )
		{
		$TestConnectivity = test-netconnection -ComputerName $server -port 5723
		if ( $TestConnectivity.TcpTestSucceeded -eq $False )
			{
			$UniqOldDownAgentsArray += "$server fails TCP5723 connectivity"
			}
		}

	$UniqOldDownAgentsArray += ""
	$UniqOldDownAgentsArray += "Verify Microsoft Monitoring Agent is installed, and healthservice running via 'get-service healthservice'"
	$UniqOldDownAgentsArray += ""

	#$UniqOldDownAgentsArray = $UniqOldDownAgentsArray | out-string

	$UniqOldDownAgentsArray
	}
	
	# Fails for DC's
	#
	#if ( $TestConnectivity.PingSucceeded -eq "False" )
	#	{
	#	$UniqOldDownAgentsArray += "SCOM cannot ping $server, contact network team to resolve firewall issue"
	#	}
	#}



# Analyze down agents
if ( $DownAgents.Count -eq 0 )
	{
	$Compare = $MM.Count + $CompareMM.Count
    $CompareDown = "ZERO NOT monitored servers as of report run"
	}
	
if ( $DownAgents.Count -gt 0 )
	{
    if ( $UnHealthyAgents.count -gt 0 )
		{
		$CompareDown = compare-object -ReferenceObject $DownAgents -DifferenceObject $UnhealthyAgents
		# Format output of DownAgents
		$Down = $DownAgents | select MonitoringObjectDisplayName,TimeRaised,Name | out-string
		$Down
		}
    if ( $UnHealthyAgents.count -eq 0 )
		{
		$Down = $DownAgents | select MonitoringObjectDisplayName | out-string
		$Down
		}
	}


# Compare Unhealthy agents
$Unhealthy = @()
	
if ( $UnHealthyAgents.Count -eq 0 )
	{
	#$Unhealthy += ""
	$Unhealthy += "ZERO NOT healthy agents as of report run"
	}
	
if ( $UnHealthyAgents.Count -gt 0 )
	{
	#$Unhealthy += ""
	$Unhealthy += $UnHealthyAgents.DisplayName | sort -uniq # | out-string
	#$Unhealthy += ""
	}
	
  $Test = $DownAgents.Count + $UnHealthyAgents.Count
  $Test


# Update to consolidate all the methods into a unique list
#===========================================================
$TotalAgentIssues = @()
$TotalAgentIssues += $DownAgents
if ( $DownAgentsOpenTime.Count -gt 0 )
	{
	$TotalAgentIssues += $RepeatDownAgents
	}
$TotalAgentIssues += $Unhealthy
$TotalAgentIssues += $Monitored.DisplayName
$TotalAgentIssues += $NotMonitored.DisplayName

# Display $TotalAgentIssues | sort -uniq
$TotalAgentIssues = $TotalAgentIssues | sort -uniq

# Debug
$TotalAgentIssues
# $CompareMM
# $Compare


# Build report
$UnhealthyAgents = @()

if ( $TotalAgentIssues.Count -eq 0)
	{
	$UnhealthyAgents += "ZERO NOT monitored servers for date ($date)."
	$UnhealthyAgents += ""
	}
	
if ( $TotalAgentIssues.Count -gt 0)
	{
	$UnhealthyAgents += ""
	$UnhealthyAgents += "# NOT monitored servers = $($TotalAgentIssues.Count)"
	$UnhealthyAgents += "# Configured Servers in Maintenance Mode MM = $($MaintM.Count)"
	$UnhealthyAgents += "#================================================"
	$UnhealthyAgents += ""
	$UnhealthyAgents += "# NOT monitored server detail"
	$UnhealthyAgents += "#============================"
	if ( $TotalAgentIssues.Count -lt 28)
		{
		$UnhealthyAgents += $TotalAgentIssues
		}
	if ( $TotalAgentIssues.Count -gt 28)
		{
		$UnhealthyAgents += "MORE than 25 servers NOT monitored"
		}
	$UnhealthyAgents += "#=================================================="
	$UnhealthyAgents += ""
	$UnhealthyAgents += "DISCLAIMER: NOSC will not reboot servers in maintenance!"
	$UnhealthyAgents += ""
	}

$UnhealthyAgents = 	$UnhealthyAgents | out-string
$UnhealthyAgents


#
# Pending patches, restarts, NOT patched in x days   

# Create array
$PRMMMessage = @()

if ($Alert -eq 0)
{  
	$PRMMMessage += ""
	$PRMMMessage += "ZERO Daily Server Pending Reboot alerts for ($date)."
	$PRMMMessage += ""
}

if ($Alert -gt 0)
	{
	$PRMMMessage += ""
	$PRMMMessage += "#"
	$PRMMMessage += "# Alert Count = $Alert"
	$PRMMMessage += "#"
	$PRMMMessage += "# Summary of Daily Server Pending Reboot alerts for ($date)"
	$PRMMMessage += "#============================================================"
	$PRMMMessage += "#"
	$PRMMMessage += "# Servers pending reboot"
	$PRMMMessage += "#=============================="
	$PRMMMessage += $Summary
	$PRMMMessage += ""
	$PRMMMessage += "# Servers NOT patched in past 35 days"
	$PRMMMessage += "#=============================="
	$PRMMMessage += $PPSummary
	$PRMMMessage += ""
	$PRMMMessage += "# Servers NOT rebooted in past 35 days"
	$PRMMMessage += "#=============================="
	$PRMMMessage += $PRSummary
	$PRMMMessage += ""
	}

$PRMMMessage = $PRMMMessage | out-string

$PRMMMessage


#===============================================
#
# Logical Disk free space alerts
#===============================================

$LDSTest = get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -ne "255" }
$LDSTest

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Logical disk Free space Alerts for date ($date).")

  # Production
  $LDSSummary = get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -ne "255" } | select NetbiosComputerName,MonitoringObjectName,Parameters | out-string
  # Gather Details section
  $LDSDetails = get-scomalert -name "Logical disk Free space is low" | ? {$_.ResolutionState -ne "255" }| fl NetbiosComputerName,MonitoringObjectName,Parameters,Description | out-string

  $LDSSummary
  write-host ""
  $LDSDetails

  $LDSMessage = @()

if ( $LDSTest.Count -eq 0 )
{
	$LDSMessage += "ZERO Logical Disk free space alerts for ($date)."
}
  
if ( $LDSTest.Count -gt 0 )
{
$LDSMessage += ""
$LDSMessage += "# Summary of Daily Logical Disk free space alerts for ($date)"
$LDSMessage += "#============================================================"
$LDSMessage += "#"
$LDSMessage += "# Logical Disk Free Space alerts"
$LDSMessage += "#=============================="
$LDSMessage += $LDSSummary
$LDSMessage += ""
$LDSMessage += "# Alert details"
$LDSMessage += "#=============================="
$LDSMessage += $LDSDetails
$LDSMessage += ""
$LDSMessage = $LDSMessage | out-string
}

$LDSMessage
write-host ""



 
 
#===============================================
# Expiring certificates
# Certificates about to expire/expired
#===============================================

$ExpCert = get-scomalert | ? { ($_.Name -eq "Certificate lifespan alert" ) } | ? { $_.ResolutionState -eq 0 }

$EXPAMessage = @()

if ( $ExpCert.Count -eq 0 )
{
$EXPAMessage += "ZERO PKI Certificates about to expire for ($date)."
}

if ( $ExpCert.Count -gt 0 )
{
$EXPAMessage += ""
$EXPAMessage += "# Certificates about to expire/expired"
$EXPAMessage += "#============================================================"
$EXPAMessage += $ExpCert | select NetBiosComputerName,Parameters | out-string
$EXPAMessage += ""
#$EXPAMessage += "# Certificate details"
#$EXPAMessage += "#=============================="
#$EXPAMessage += $ExpCert |fl NetBiosComputerName,Parameters,Context | out-string
$EXPAMessage += ""

$EXPAMessage

$EXPAMessage = $EXPAMessage | out-string
}


#============================================================
#
# DC Key/important alerts
#============================================================
$DCAlerts = get-scomalert | ? { ($_.Name -eq "The Infrastructure Master Ping Availability health monitor has failed." ) `
	-OR ($_.Name -eq "The Infrastructure Master LDAP Bind Availability health monitor has failed." ) `
	-OR ($_.Name -eq "The PDC LDAP Bind Availability health monitor has failed." ) `
	-OR ($_.Name -eq "The PDC Ping Availability health monitor has failed." ) `
	-OR ($_.Name -eq "The RID Master LDAP Bind Availability health monitor has failed." ) `
	-OR ($_.Name -eq "The RID Master Ping Availability health monitor has failed." ) `
	-OR ($_.Name -eq "Domain System Volume (SYSVOL) Share Not Available" ) `
	-OR ($_.Name -eq "The LSASS process has exceeded the processor utilization threshold over multiple samples." ) `
	-OR ($_.Name -eq "The total number of ATQ threads in use has exceeded one or more thresholds over multiple samples." ) `
	-OR ($_.Name -eq "The Replication Consistency health monitor has failed." ) `
	-OR ($_.Name -eq "AD Trust Monitor health monitor has failed." ) `
	-OR ($_.Name -eq "Replication Partner Count health monitor has failed." ) `
	-OR ($_.Name -eq "DCLocator test failed to locate a domain controller." ) `
	-OR ($_.Name -eq "The Global Catalog Search Availability script has failed." ) `
	-OR ($_.Name -eq "The Time Skew monitor has failed." ) `
	-OR ($_.Name -eq "The LDAP Bind Time health monitor has exceeded one or more thresholds." ) `
	-OR ($_.Name -eq "The Network Adapters DNS Servers health monitor has failed." ) `
	-OR ($_.Name -eq "Active Directory Web Services Not Running" ) `
	-OR ($_.Name -eq "AD Lost and Found Object health monitor has failed." ) `
	-OR ($_.Name -eq "AD Show Replication Check health monitor has failed." ) `
	-OR ($_.Name -eq "AD Site Availability Health Degraded." ) `
 	-OR ($_.Name -eq "AD Domain Availability Health Degraded." ) `
	-OR ($_.Name -eq "AD Site Performance Health Degraded." ) `
	} | ? { ( $_.TimeRaised -ge $Time ) }

$DCACount = $DCAlerts.Count

$DCAMessage = @()

if ( $DCACount -eq 0 )
{
$DCAMessage += "ZERO DC Alerts for role failures, SysVol, LSASS, Replication related alerts for ($date)."	
}

if ( $DCACount -gt 0 )
{
write-host -f yellow "`n# Servers with more than 5 alerts"
$DCAMessage += "# DC Alerts"
$DCAMessage += "#"
$DCAMessage += "# Alert Count = $DCACount"
$DCAMessage += "#"
$DCAMessage += "# NOTE: DC role failures,SysVol,LSASS, Replication related Alerts"
$DCAMessage += "#============================================================"
$DCAMessage += "#"
#$DCAMessage += "# Servers with more than 5 alerts"
#$DCAMessage += "#================================"

# Disable if noisy environment
#foreach ( $Server in ($DCAlerts.NetBiosComputerName | sort -unique ) )
# {
# $Server
# $Alerts = (($DCAlerts.NetBiosComputerName) | ? { $_ -eq $server } ).Count
# if ( $Alerts -gt 5 )
#	{
#	write-host -f yellow "Server ($Server) has ($Alerts)"
#	$DCAMessage += "Server ($Server) has ($Alerts) alerts"
#	}
# }

$DCAMessage += ""
$DCAMessage += "# DC Alert Details"
$DCAMessage += "#================================"

if ( $DCACount -lt 10 )
	{
	$DCAMessage += $DCAlerts |sort -unique | select TimeRaised,NetBiosComputerName,Name | out-string
 
	$DCAMessage += ""
	$DCAMessage = $DCAMessage | out-string
	}
if ( $DCACount -gt 10 )
	{
	$DCAMessage += "More than 10 unique DC's with alerts"
	#$DCAlerts |sort -unique | select TimeRaised,NetBiosComputerName,Name | out-string
 
	$DCAMessage += ""
	}
}

$DCAMessage
$DCAMessage = $DCAMessage | out-string



#============================================================
#
# DNS Alerts
#============================================================
$DNSAlerts = get-scomalert | ? { ($_.Name -eq "Windows DNS - NSLookup Failed for Zone's NS Record" ) `
	-OR ($_.Name -eq "Windows DNS - Conditional Forward Forwarder - All IP Addresses Failing NSLookup" ) `
	-OR ($_.Name -eq "Windows DNS - NSLookup Failed Against a Local Address" ) `
	-OR ($_.Name -eq "Windows DNS - WMI Validation Failed" ) `
	-OR ($_.Name -eq "Windows DNS - Active Directory Integrated Interface Error" ) `
	-OR ($_.Name -eq "Windows DNS - Active Directory Record Load Failed" ) `
	-OR ($_.Name -eq "Windows DNS - Active Directory Integrated Write Failed" ) `
	-OR ($_.Name -eq "Windows DNS - Socket Failure" ) `
	-OR ($_.Name -eq "Windows DNS - Configuration - Open Socket For Address" ) `
	-OR ($_.Name -eq "Windows DNS - Active Directory Integrated Zone Conflict" ) `
	-OR ($_.Name -eq "Windows DNS - Active Directory Integrated Zone Operation Failed" ) `
	-OR ($_.Name -eq "Windows DNS 2016 and 1709+ - Detect Unused Zone" ) `
	} | ? { $_.TimeRaised -ge $Time }

$DNSACount = $DNSAlerts.Count

$DNSAMessage = @()

if ( $DNSACount -eq 0 )
{
	$DNSAMessage += "ZERO DNS alerts for ($date)."
}

	
if ( $DNSACount -gt 0 )
{
write-host -f yellow "`n# Servers with more than 5 alerts"
$DNSAMessage = @()
$DNSAMessage += ""
$DNSAMessage += "Alert Count = $DNSACount"
$DNSAMessage += ""
$DNSAMessage += "# DNS Alerts"
$DNSAMessage += "#============================================================"
$DNSAMessage += ""
#$DNSAMessage += "# Servers with more than 5 alerts"
#$DNSAMessage += "#================================"

#foreach ( $Server in ($DNSAlerts.NetBiosComputerName | sort -unique ) )
# {
# $Server
# $Alerts = (($DNSAlerts.NetBiosComputerName) | ? { $_ -eq $server } ).Count
# if ( $Alerts -gt 5 )
#	{
#	write-host -f yellow "Server ($Server) has ($Alerts)"
#	$DNSAMessage += "Server ($Server) has ($Alerts) alerts"
#	}
# }

#$DNSAMessage += ""
$DNSAMessage += "# DNS Alert Details"
$DNSAMessage += "#================================"
$DNSAMessage += $DNSAlerts |sort -unique | select TimeRaised,NetBiosComputerName,Name | out-string
$DNSAMessage += ""
$DNSAMessage = $DNSAMessage | out-string
}

$DNSAMessage



# Group Policy issues
#============================================================
$GPAlerts = get-scomalert | ? { ($_.Name -eq "Group Policy Client Service Not Running" ) `
	-OR ( $_.Name -eq "The Group Policy Update health monitor has failed." ) `
	} | ? { ( $_.TimeRaised -ge $Time ) } 

write-host -f yellow "`n# Servers with Group policy alerts"

$GPAMessage = @()

if ( $GPAlerts.Count -eq 0 )
{
	$GPAMessage = "ZERO Group Policy alerts for ($date)."
}

if ( $GPAlerts.Count -gt 0 )
{

$GPAlertCount = ($GPAlerts.NetBiosComputerName | sort -uniq).Count

$GPAMessage += ""
$GPAMessage += "# Group Policy"
$GPAMessage += "#============================================================"
$GPAMessage += "#"
$GPAMessage += "# Number of Group Policy alerts = $($GPAlerts.Count)"
$GPAMessage += "#"
$GPAMessage += "# Server count with Group policy alerts = $($GPAlertCount)"
$GPAMessage += "#================================="
$GPAMessage += "# See ADDS alert report for details and breakout of GPO issues"
$GPAMessage += ""


#foreach ( $Server in ($GPAlerts.NetBiosComputerName | sort -unique ) )
# {
# $Server
# $Alerts = (($GPAlerts.NetBiosComputerName) | ? { $_ -eq $server } ).Count
# $GPAMessage += "Server ($Server) has ($Alerts) alerts"
# }

# Group Policy alert details

#$GPAMessage += ""
#$GPAMessage += "# Group policy alert details"
#$GPAMessage += "#==========================="
#$GPAMessage += $GPAlerts | select NetBiosComputerName,TimeRaised,Name | out-string
#$GPAMessage += ""
#$GPAMessage = $GPAMessage | out-string
}

$GPAMessage

$GPAMessage = $GPAMessage | out-string


#============================================================
#
# Tally up all the property bags for datasource

$Result = "GOOD"
  
# Log 
$Summary = "# $DSMessage`n `n$UHSAMessage `n `n$UnhealthyAgents`n `n$PRMMMessage`n `n$LDSMessage`n `n$EXPAMessage`n `n$DCAMessage`n `n$DNSAMessage`n `n$GPAMessage`n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"

write-host "End of Debug"
write-host " "

$Summary

write-host " "
write-host "Writing 555 Event ID for summary variable"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# $DSMessage`n `n$UHSAMessage`n$PRMMMessage `n$LDSMessage `n$EXPAMessage `n$DCAMessage `n$DNSAMessage `n$GPAMessage `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode")

  $bag.AddValue('Message',$DSMessage)
  $bag.AddValue('Summary',$Summary)


# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Alert.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.WA.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather Expiring Certificate Alerts on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.WA.v1024.ps1"
$EventID = "557"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Alerts for date ($date).")
 
# Expiring certificates
# Certificates about to expire/expired
#===============================================

$ExpCert = get-scomalert | ? { ($_.Name -eq "Certificate lifespan alert" ) } | ? { $_.ResolutionState -eq 0 }

$Message = "Daily Expiring Certificates report has ($Test) alerts for ($date)"

$Test = $ExpCert.count

$EXPAMessage = @()
$EXPAMessage += "# Certificates about to expire/expired"
$EXPAMessage += "#============================================================"
$EXPAMessage += $ExpCert | select NetBiosComputerName,Parameters | out-string
$EXPAMessage += ""
#$EXPAMessage += "# Certificate details"
#$EXPAMessage += "#=============================="
#$EXPAMessage += $ExpCert |fl NetBiosComputerName,Parameters,Description | out-string
$EXPAMessage += ""
$EXPAMessage

$EXPAMessage = $EXPAMessage | out-string


#============================================================


  $Result = "GOOD"
  $Message = "Daily Server Expiring certificates report for ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n# Summary of Expiring Certificates for ($date). `n `n$EXPAMessage")

$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$EXPAMessage)  

# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Alert.Rule.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.Report.Script.Alert.Rule.WA.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather DailySummary report data for enterprise
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.Report.Script.Alert.Rule.WA.v1024.ps1"
$EventID = "559"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather SCOM Admin Alerts for date ($date).")
$DSMessage = "Proactive Daily Summary SCOM Admin Alert tasks for date ($date)."


#
# Clean up old reports
#===============================================
$OldReports = get-scomalert | ? { ( $_.Name -like "NG.DailyTasks McAfee*" ) `
	-OR ( $_.Name -like "NG DailyTasks*" ) `
	-OR ( $_.Name -like "NG McAfee*" ) `
	-OR ( $_.Name -like "NG Tangible*" ) `
	-OR ( $_.Name -like "Proactive DailyTasks*" ) `
	-OR ( $_.Name -like "Proactive DC NetLogon*" ) `
	-OR ( $_.Name -like "Proactive NOSC DailyTasks*" ) `
	-OR ( $_.Name -eq "Proactive Tanium EventID7031 Rule Alert" ) `
	-OR ( $_.Name -like "Proactive DailyTasks*" ) `
	-OR ( $_.Name -like "Proactive McAfee*" ) `
	} | ? { $_.ResolutionState -ne 255 }

$OldReports = $OldReports | ? { $_.TimeRaised -ge $Time } 
$OldReports.count

if ( $OldReports.Count -gt 0 )
	{
	$OldReports | ? { ( $_.Name -notlike "NG McAfee*" ) -AND ( $_.Name -notlike "NG Tangible*" ) } `
	| set-scomalert -ResolutionState 255
	}

# Add ATQ ticket ID
# The total number of ATQ threads in use has exceeded one or more thresholds over multiple samples.
$ATQ = get-scomalert | ? { ( $_.Name -eq "The total number of ATQ threads in use has exceeded one or more thresholds over multiple samples." ) `
	-AND ( $_.TimeRaised -gt $Time ) `
	-AND ( $_.ResolutionState -ne 255 ) `
	}

if ( $ATQ.count -gt 0 )
	{
	$ATQ = $ATQ | set-scomalert -TicketID 3298691 -ResolutionState 248
	}
	
#===============================================
# Unhealthy Agents
# Agents with alert counts in past 24 hours
#===============================================

$UnhealthyAgentAlerts = get-scomalert | ? { ( $_.Name -eq "Alert generation was temporarily suspended due to too many alerts." ) `
	-OR ( $_.Name -eq "Agent errors for over-utilized server" ) `
	-OR ( $_.Name -eq "ATA Gateway Service Monitor Service Alert" ) `
	-OR ( $_.Name -eq "DNS Reconnaissance Suspicious Activity" ) `
	-OR ( $_.Name -eq "Failed to send notification using server/device" ) `
	-OR ( $_.Name -eq "Gateway Low Memory Monitoring Alert" ) `
	-OR ( $_.Name -eq "Gateway Overloaded Network Activities Monitoring Alert" ) `
	-OR ( $_.Name -eq "Monitor Generated Alerts Have been Manually Closed" ) `
	-OR ( $_.Name -eq "MSSQL on Windows: Monitoring Pool Alert Collection" ) `
	-OR ( $_.Name -eq "MSSQL on Windows: SQL Server has failed to allocate sufficient memory to run the query" ) `
	-OR ( $_.Name -eq "Power Shell Script failed to run" ) `
	-OR ( $_.Name -eq "Remote Execution Suspicious Activity" ) `
	-OR ( $_.Name -eq "SAMR Reconnaissance Suspicious Activity" ) `
	-OR ( $_.Name -eq "Consolidator Module Failed Initialization" ) `
	-OR ( $_.Name -eq "Correlation Module Failed Initialization" ) `
	-OR ( $_.Name -eq "Expression Filter Module Failed Initialization" ) `
	-OR ( $_.Name -eq "Workflow Runtime: Failed to run a process or script" ) `
	-OR ( $_.Name -eq "Workflow Runtime: Failed to run a WMI query" ) `
	} | ? { $_.ResolutionState -ne "255"}  | ? { $_.TimeRaised -gt $Time }




# 
# Set up array for unhealthy agent report
$UHAAMessage = @()

if ( $UnhealthyAgentAlerts.Count -eq 0 )
{
	$UHAAMessage += "ZERO Unhealthy Agent alerts for date ($date)."
}
	
if ( $UnhealthyAgentAlerts.Count -gt 0 )
	{
	$UHAAMessage += ""
	$UHAAMessage += $DSMessage
	$UHAAMessage += ""
	$UHAAMessage += "# Auto-closed report rule alerts = $($OldReports.Count)"
	$UHAAMessage += "# Auto-closed monitors = $($UnhealthyMonitors.Count)"
	$UHAAMessage += "# Auto-closed rules = $($SCOMAdminRulesToClose.Count)"
	$UHAAMessage += ""
	$UHAAMessage += "# Servers NOT being monitored correctly"
	$UHAAMessage += "#======================================"
	$UHAAMessage += "# Contain SCOM Agent workflow/powershell/WMI/service checks that alert with failures"
	$UHAAMessage += "#==================================================================================="

	
	foreach ( $Server in ($UnhealthyAgentAlerts.NetBiosComputerName | sort -unique ) )
	{
	$Server
	$Alerts = (($UnhealthyAgentAlerts.NetBiosComputerName) | ? { $_ -eq $server } ).Count
	$UHAAMessage += "Server $($Server) has $($Alerts) alerts"
	}

	$UHAAMessage += ""
	$UHAAMessage += "# Unhealthy Agent alert details"
	$UHAAMessage += "#=============================="
	$UHAAMessage += $UnhealthyAgentAlerts | select NetBiosComputerName,TimeRaised,Name
	$UHAAMessage += "#=============================="
	$UHAAMessage += ""
	}

	$UHAAMessage 
	
	$UHAAMessage = $UHAAMessage | out-string
	
	$UHAAMessage 
	
	

# Reset Monitors Script
# Put ps1 in mgmtpacks folder
# https://sc.scomurr.com/scom-2012-monitor-reset-cleaning-up-the-environment/
#	Download
# https://gallery.technet.microsoft.com/SCOM-2012-Batch-reset-63a17534
	
#Alternate
#https://gallery.technet.microsoft.com/scriptcenter/Auto-reset-script-for-d8b775ca

$SCOMAdminMonitorsToAutoClose = @()

# SCOMAdmin Alerts to auto-close
  # Monitors
$SCOMAdminMonitorsToAutoClose += "Alert Subscription Availability Monitor"
$SCOMAdminMonitorsToAutoClose += "ATA Gateway Service Monitor"

#
# Create Array for all the unhealthy monitors
$UnhealthyMonitors = @()

if ( $Test -gt 0 )
{
foreach ($MonitorDisplayName in $SCOMAdminMonitorsToAutoClose)
	{
	$Monitors = @(Get-SCOMMonitor -displayname $MonitorDisplayName)

	# Set up monitor objects to reset
		
	foreach ($Monitor in $Monitors)
		{
		$MonitorClass = Get-SCOMClass -Id $Monitor.Target.Id
		write-host ""
		write-host "Monitor Class = " + $MonitorClass
		$ActiveMonitors = Get-SCOMClassInstance -Class $MonitorClass | ? { ($_.healthstate -ne 'Success') -AND ( $_.healthstate -ne 'Uninitialized') -AND ($_.IsAvailable -eq $true) }
		$UnhealthyMonitors += $ActiveMonitors.Count
		$ActiveMonitors.Count
		write-host "Found" + $ActiveMonitors.Count + "active monitors."
		write-host ""
		if ( $ActiveMonitors.Count -gt 0)
			{
			foreach ($ActiveMonitor in $ActiveMonitors)
				{
				write-host " Resetting Health State on '" +$ActiveMonitor.FullName + "'" 
				$ActiveMonitor.ResetMonitoringState($Monitor.ID)
				}
			}
		}
	}
}
	

#============================================================
#
# Clean up/Resolve open alerts

#
# (Rules) Set array for closing rules
$SCOMAdminRulesToClose = @()

$SCOMAdminRulesToClose = get-scomalert | ? { ( $_.Name -eq "Alert generation was temporarily suspended due to too many alerts." ) `
	-OR ( $_.Name -eq "	Alert on Failure to Create PowerShell Run space for Power Shell Script" ) `
	-OR ( $_.Name -eq "Agent errors for over-utilized server" ) `
	-OR ( $_.Name -eq "DNS Reconnaissance Suspicious Activity" ) `
	-OR ( $_.Name -eq "Failed to send notification using server/device" ) `
	-OR ( $_.Name -eq "Gateway Low Memory Monitoring Alert" ) `
	-OR ( $_.Name -eq "Gateway Overloaded Network Activities Monitoring Alert" ) `
	-OR ( $_.Name -eq "Monitor Generated Alerts Have been Manually Closed" ) `
	-OR ( $_.Name -eq "MSSQL on Windows: Monitoring Pool Alert Collection" ) `
 	-OR ( $_.Name -eq "MSSQL on Windows: SQL Server has failed to allocate sufficient memory to run the query" ) `
	-OR ( $_.Name -like "NG.DailyTasks McAfee*" ) `	
	-OR ( $_.Name -like "NG DailyTasks*" ) `
	-OR ( $_.Name -like "NG McAfee*" ) `
	-OR ( $_.Name -like "NG Tangible*" ) `
	-OR ( $_.Name -like "Proactive DailyTasks*" ) `
	-OR ( $_.Name -like "Proactive DC NetLogon*" ) `
	-OR ( $_.Name -like "Proactive NOSC DailyTasks*" ) `
	-OR ( $_.Name -eq "Proactive Tanium EventID7031 Rule Alert" ) `
	-OR ( $_.Name -eq "Power Shell Script failed to run" ) `
	-OR ( $_.Name -eq "Remote Execution Suspicious Activity" ) `
	-OR ( $_.Name -eq "SAMR Reconnaissance Suspicious Activity" ) `
	} | ? { $_.ResolutionState -ne "255"}  | ? { $_.TimeRaised -gt $Time }

$SCOMAdminRulesToClose.Count

if ( $SCOMAdminRulesToClose.Count -gt 0 )
	{
	$SCOMAdminRulesToClose | Set-SCOMAlert -ResolutionState 255
	}

	




#============================================================
#
# Tally up all the property bags for datasource

$Result = "GOOD"
  
# Log 
$Summary = "$UHAAMessage `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"$UHAAMessage`n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode")

  $bag.AddValue('Message',$DSMessage)
  $bag.AddValue('Summary',$Summary)


# Return all bags
$bag


#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule.WA.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather LongRunning scripts since last report run
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule.WA.v1024.ps1"
$EventID = "540"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================

 
# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}


$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather SCOM Admin Alerts for date ($date).")
$DSMessage = "Proactive DailyTasks SCOMAdmin Long running scripts report for date ($date)."
	

# Set up arrays
$RuntimeSeconds = @()
$RS = @()
$RuntimeTotal = @()
$LongRunningDetail = @()
$LongRunningReport = @()


# Gather scripts to check since last report
# Debug (40s on one env)
# date
$LongRunning  = get-eventlog -LogName "Operations Manager" -Source "Health Service Script" -after $Time `
	| ? { ( $_.EventID -gt "540" ) -AND ( $_.EventID -lt "620" ) } `
	| ? { $_.Message -like "*Script Runtime:*" } `
	| ? { ( $_.EventID -ne "570" ) -AND ( $_.EventID -ne "560" ) -AND ( $_.EventID -ne "561" ) -AND ( $_.EventID -ne "562" ) `
	}
	#| fl TimeGenerated,Message
# date

# Debug
$LongRunning.Count
$RuntimeTotal = @()

if ( $LongRunning.Count -gt 0 )
	{
	foreach ($LLine in $LongRunning.Message)
		{
		$Lmatch = $LLine |select-string -pattern ':'
		if ($Lmatch)
			{
			# Debug
			#$Lmatch
			$LLineSplit = $LLine.Split(":")
			#$LLineSplit
			#$LLineSplit[1]; $LLineSplit[2]
			#$LLineSplit[2]
			$RuntimeSeconds = $LLineSplit[2].Split(".")
			#$RuntimeSeconds
			$RS = $RuntimeSeconds[0].Split("(")
			# Debug
			#$RS
			$RuntimeTotal += $RS
			}
		}
	}

# Clean up RuntimeTotal array
$RuntimeTotal = $RuntimeTotal.Split('',[System.StringSplitOptions]::RemoveEmptyEntries) | sort -uniq

# Debug to see $RuntimeTotal
#$RuntimeTotal
# Reset array
#$LongRunningDetail = @()

# Convert value to integer and evaluate
if ( $RuntimeTotal.Count -gt 0 )
	{
	foreach ( $Instance in $RuntimeTotal)
		{
		# Debug
		#$Instance
		$Int = [int]$Instance
		if ( $Int -gt "200" )
			{
			# Debug
			# $Int
			write-host "Long running script past 200 seconds or 3+ minutes after $Time "
			# Identify which script
			$LongRunningDetail += ($LongRunning | ? { $_.Message -like "*$Int*" }).Message
			}
		if ( $Int -lt "200" )
			{
			# Debug
			# $Int
			write-host "ZERO Long running scripts after $Time "
			}
		}
	}
	
$LongRunningDetail



# Create report
#==============================

# Check for alerts 
if ( $LongRunningDetail.Count -eq 0 )
	{
	$Message = "ZERO SCOMAdmin Long running scripts for date ($date)"
	$LongRunningReport += "ZERO SCOMAdmin Long running scripts for date ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}
	
if ( $LongRunningDetail.Count -gt 0 )
	{
	#
	# Create table output	

	#
	# Show ADDS alerts by Time Raised,NetBiosComputerName,Message
	#
	$LongRunningReport += ""
	$LongRunningReport += "# Proactive DailyTasks SCOMAdmin Long running scripts report for date $($date)"
	$LongRunningReport += "#"
	$LongRunningReport += "# SCOMAdmin Long running scripts = $($LongRunningDetail.count)"
	$LongRunningReport += "#"
	$LongRunningReport += "# Total Long running script details"
	$LongRunningReport += "#========================================================"
	$LongRunningReport += $LongRunningDetail | out-string
	$LongRunningReport += ""
	}

$LongRunningReport = $LongRunningReport | out-string
$LongRunningReport


#============================================================
#
# Tally up all the property bags for datasource

$Result = "GOOD"
  
# Log 
$Summary = "$LongRunningReport `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"$LongRunningReport`n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode")

  $bag.AddValue('Message',$DSMessage)
  $bag.AddValue('Summary',$Summary)


# Return all bags
$bag


#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule.WA.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather ScriptErrors scripts since last report run
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule.WA.v1024.ps1"
$EventID = "540"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================

 
# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather SCOM Admin ScriptErrors report task for date ($date).")
$DSMessage = "Proactive DailyTasks SCOMAdmin ScriptErrors report task for date ($date)."


# Set up arrays
$RuntimeSeconds = @()
$RS = @()
$RuntimeTotal = @()
$ScriptErrorsDetail = @()
$ScriptErrorsReport = @()


# Gather scripts to check since last report
# Debug (40s on one env)
# date
$ScriptErrors  = get-eventlog -LogName "Operations Manager" -Source "Health Service Modules" -after $Time `
	| ? { ( $_.EventID -eq "22406" ) `
	-OR ( $_.EventID -eq "31551" ) `
	-OR ( $_.EventID -eq "31552" ) `
	-OR ( $_.EventID -eq "31553" ) `
	-OR ( $_.EventID -eq "31557" ) `
	-OR ( $_.EventID -eq "31561" ) `
	-OR ( $_.EventID -eq "31563" ) `
	}
	#| fl TimeGenerated,Message
$ScriptErrors.Count


# Breakdown of events
#=========================================

# Operations Manager Event ID 31551
#===================================
# Unable to connect to SQL$ScriptErrors
$SQLConnectErrors =  $ScriptErrors | ? { ( $_.Message -like "*Could not open a connection to SQL Server*" ) `
	}
$SQLConnectErrors.Count

# View details, Network related connection failures from MS > SQL$SQLConnectErrors
$SQLConnectErrors | sort -property Message -uniq | ft TimeGenerated,EventId,Message -auto -wrap
$SQLConnectErrors.Message | select -last 1

# Table Access errors
$TableAccess = $ScriptErrors | ? { ( $_.EventID -eq "31551" ) } | sort -property Message -uniq | ? { $_.Message -like "*Cannot access destination table*" }
$TableAccess.Count

# View details
#$TableAccess | sort -property Message -uniq | ft TimeGenerated,EventId,Message -auto -wrap


# DataWarehouse Timeout Stored Procedures
$DWTimeOutSP = $ScriptErrors | ? { ( $_.EventID -eq "31551" ) } | sort -property Message -uniq | ? { $_.Message -like "*Timed out stored procedure*" }
$DWTimeOutSP.Count

# View details
#$DWTimeOutSP | sort -property Message -uniq | ft TimeGenerated,EventId,Message -auto -wrap


# Registry tuning required for SQL inserts
$RegTuningRequired = $ScriptErrors | ? { ( $_.EventID -eq "31551" ) -AND ( $_.Message -like "*This timeout can be increased by adding a registry key*" ) } 
$RegTuningRequired.Count

# Display events
#$RegTuningRequired | sort -property Message -uniq | sort -property TimeGenerated -desc | ft TimeGenerated,EventId,Message -auto -wrap
# Display latest message
#$RegTuningRequired.Message | select -last 1

# Registry value on RMSe
get-itemproperty "HKLM:Software\Microsoft\Microsoft Operations Manager\3.0\Data Warehouse"


# Operations Manager Event ID 3155x-31569
#===================================

# DataWarehouse Timeout Stored Procedures
$DWTimeOutSP = $ScriptErrors | ? { $_.Message -like "*Timed out stored procedure*" } | sort -property TimeGenerated -desc
$DWTimeOutSP.Count

# Display events
#$DWTimeOutSP | sort -property TimeGenerated -uniq -desc | select TimeGenerated,EventId -last 1


# DataWarehouse pre-login handshake acknowledgement
# Gather ALL handshake failures
$Handshake = $ScriptErrors | ? { $_.Message -like "*pre-login handshake acknowledgement*" } | sort -property TimeGenerated -uniq -desc 
$Handshake.Count

# Display Events
#$Handshake | select TimeGenerated,EventID -last 1


# LoginFailed
$LoginFailed = $ScriptErrors | ? { $_.Message -like "*Login failed for user*" } | sort -property TimeGenerated -desc 
$LoginFailed.Count

# Display Events
#$LoginFailed| sort -property TimeGenerated -uniq -desc | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap


# Operations Manager Event ID 31553
#===================================
# Parallel execution errors on SQL Server
# $ParallelExecutionErrors = $ScriptErrors | ? { ( $_.EventID -eq "31553" ) }
$ParallelExecutionErrors = $ScriptErrors | ? { $_.Message -like "*parallel query execution*" }
$ParallelExecutionErrors.Count

# Display Uniq Events
#$ParallelExecutionErrors | sort -property Message -uniq | sort -property TimeGenerated -desc | ft TimeGenerated,EventId,Message -auto -wrap


# Look for 2115 events during same period of time as backlog may cause reports to fail
#$2115Errors	= get-eventlog -LogName "Operations Manager" -Source "HealthService" -after $Time `
#	| ? { ( $_.EventID -eq "2115" ) `
#	-OR ( $_.EventID -eq "8000" ) `
#	}
#$2115Errors.Count


# Remaining SQL errors
$RemainingScriptErrors = $ScriptErrors | ? { ( $_.Message -notlike "*Could not open a connection to SQL Server*" ) `
	-AND ( $_.Message -NOTlike "*Cannot access destination table*" ) `
	-AND ( $_.Message -NOTlike "*Timed out stored procedure*" ) `
	-AND ( $_.Message -NOTlike "*This timeout can be increased by adding a registry key*" ) `
	-AND ( $_.Message -NOTlike "*pre-login handshake acknowledgement*" ) `
	-AND ( $_.Message -NOTlike "*Login failed for user*" ) `
	-AND ( $_.Message -NOTlike "*parallel query execution*" ) `
	}

$RemainingScriptErrors.Count

# Display Events
$RemainingScriptErrors | sort -property TimeGenerated -desc | ft TimeGenerated,EventId,Message -auto -wrap



# Create report
#==============================
$ScriptErrorsReport = @()

# Check for alerts 
if ( $ScriptErrors.Count -eq 0 )
	{
	$Message = "ZERO Proactive DailyTasks SCOMAdmin ScriptErrors report task for date ($date)"
	$ScriptErrorsReport += "ZERO Proactive DailyTasks SCOMAdmin ScriptErrors report task for date ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}
	
if ( $ScriptErrors.Count -gt 0 )
	{
	#
	# Create table output	

	#
	# Show ADDS alerts by Time Raised,NetBiosComputerName,Message
	#
	$ScriptErrorsReport += ""
	$ScriptErrorsReport += "Proactive DailyTasks SCOMAdmin ScriptErrors report task for date $($date)"
	$ScriptErrorsReport += "#"
	$ScriptErrorsReport += "# Alerts since last run = $($ScriptErrors.count)"
	$ScriptErrorsReport += "#"
	$ScriptErrorsReport += "# Breakdown of alerts"
	$ScriptErrorsReport += "#========================================================"
	$ScriptErrorsReport += "# 'Cannot access destination table' alerts = $($TableAccess.Count)"
	$ScriptErrorsReport += "# 'Could not open a connection to SQL Server' alerts = $($SQLConnectErrors.Count)"
	$ScriptErrorsReport += "# 'Login failed for user' alerts = $($LoginFailed.Count)"
	$ScriptErrorsReport += "# 'Network pre-login handshake failure' alerts = $($Handshake.Count)" 	
	$ScriptErrorsReport += "# 'parallel query execution' alerts = $($ParallelExecutionErrors.Count)"	
 	$ScriptErrorsReport += "# 'This timeout can be increased by adding a registry key' alerts = $($RegTuningRequired.Count)"
 	$ScriptErrorsReport += "# 'Timed out stored procedure' alerts = $($DWTimeOutSP.Count)"
	$ScriptErrorsReport += "#"
 	$ScriptErrorsReport += "# Remaining Script error alerts = $($RemainingScriptErrors.Count)"
	$ScriptErrorsReport += "#========================================================"
	$ScriptErrorsReport += "#"
	$ScriptErrorsReport += "#"
 	$ScriptErrorsReport += "# Breakdown of events - most will be single (one or 1 ) event details"
	$ScriptErrorsReport += "#====================="

if ( $TableAccess.Count -gt 0 )
	{
	$ScriptErrorsReport += "# Cannot access destination table detail"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $TableAccess | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap
	$ScriptErrorsReport += ""
	}

if ( $SQLConnectErrors.Count -gt 0 )
	{
	$ScriptErrorsReport += "# SCOM to SQL Connect Error"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $SQLConnectErrors.Message | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap
	$ScriptErrorsReport += ""
	}

if ( $LoginFailed.Count -gt 0 )
	{
	$ScriptErrorsReport += "# Login failed"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $LoginFailed| sort -property TimeGenerated -uniq -desc | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap
	$ScriptErrorsReport += ""
	}

if ( $Handshake.Count -gt 0 )
	{
	$ScriptErrorsReport += "# Network pre-login handshake failure"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $Handshake | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap
	$ScriptErrorsReport += ""
	}

if ( $ParallelExecutionErrors -gt 0 )
	{
	$ScriptErrorsReport += "# Parallel execution error"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $ParallelExecutionErrors | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap
	$ScriptErrorsReport += ""
	}
	
if ( $RegTuningRequired.Count -gt 0 )
	{
	$ScriptErrorsReport += "# This timeout can be increased by adding a registry key"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $RegTuningRequired | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap
	$ScriptErrorsReport += ""
	$ScriptErrorsReport += "# Current Registry settings:"
	$ScriptErrorsReport += get-itemproperty "HKLM:Software\Microsoft\Microsoft Operations Manager\3.0\Data Warehouse"
	$ScriptErrorsReport += ""
	}
	
if ( $DWTimeOutSP.Count -gt 0 )
	{
	$ScriptErrorsReport += "# Timed out stored procedure"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $DWTimeOutSP | select -last 1 | ft TimeGenerated,EventID,Message -auto -wrap
	$ScriptErrorsReport += ""
	}

if ( $RemainingScriptErrors.Count -gt 0 )
	{
	$ScriptErrorsReport += "# Remaining Script Error"
	$ScriptErrorsReport += "#======================================="
	$ScriptErrorsReport += $RemainingScriptErrors | sort -property TimeGenerated -desc | ft TimeGenerated,EventId,Message -auto -wrap
	$ScriptErrorsReport += ""
	$ScriptErrorsReport += ""
	}
	
	}

$ScriptErrorsReport

$ScriptErrorsReport = $ScriptErrorsReport | out-string
$ScriptErrorsReport


#============================================================
#
# Tally up all the property bags for datasource

$Result = "GOOD"
  
# Log 
$Summary = "$ScriptErrorsReport `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"$ScriptErrorsReport`n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode")

  $bag.AddValue('Message',$DSMessage)
  $bag.AddValue('Summary',$Summary)


# Return all bags
$bag


#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Alert.Rule.Datasource">
            <TimeoutSeconds>120</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Alert.Rule.Datasource">
            <TimeoutSeconds>120</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
              <AlertParameter4>$Data/Property[@Name='Details']$</AlertParameter4>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">551</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Summary of Daily Logical Disk free space alerts for</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Task.Alert.ZERO.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">551</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Daily Logical Disk Free space report has ZERO alerts for</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Task.Alert.ZERO.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Alert.Rule" Enabled="false" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Alert.Rule.Datasource">
            <TimeoutSeconds>300</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
              <AlertParameter4>$Data/Property[@Name='Details']$</AlertParameter4>
              <AlertParameter5>$Data/Property[@Name='MaintenanceMode']$</AlertParameter5>
            </AlertParameters>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>MatchesRegularExpression</Operator>
                    <Pattern>553|559</Pattern>
                  </RegExExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Daily Server Pending Reboot alerts for</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.Alert.Rule.Datasource">
            <TimeoutSeconds>300</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
              <AlertParameter4>$Data/Property[@Name='Details']$</AlertParameter4>
              <AlertParameter5>$Data/Property[@Name='MaintenanceMode']$</AlertParameter5>
            </AlertParameters>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Alert.Rule.Datasource">
            <TimeoutSeconds>900</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Message']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Summary']$</AlertParameter2>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">555</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Proactive DailyTasks Daily Summary Alerts for date </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">557</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Summary of Expiring Certificates </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.Report.Execution.Error.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">26319</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>does not have sufficient permission to perform the operation</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.Report.Execution.Error.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Alert.Rule.Datasource">
            <TimeoutSeconds>600</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Message']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Summary']$</AlertParameter2>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">559</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Proactive Daily Summary SCOM Admin Alert tasks for date </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule.Datasource">
            <TimeoutSeconds>300</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Message']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Summary']$</AlertParameter2>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">540</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Proactive DailyTasks SCOMAdmin Long running scripts Tasks report for date </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule.Datasource">
            <TimeoutSeconds>300</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Message']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Summary']$</AlertParameter2>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">540</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Proactive DailyTasks SCOMAdmin ScriptErrors report task for date </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="Proactive.NOSC.DailyTasks.DailySummary.Report.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Alert.WA">
          <TimeoutSeconds>600</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Alert.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Alert.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Alert.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.Alert.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Alert.Rule.WA">
          <TimeoutSeconds>900</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>  
      <Task ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>  
    </Tasks>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Alert.Rule.AlertMessage" />
	  <StringResource ID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Task.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Task.Alert.ZERO.Rule.AlertMessage" />
      <StringResource ID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Task.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.Alert.Rule.AlertMessage" />
	  <StringResource ID="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Task.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Task.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.NOSC.DailyTasks.Report.Execution.Error.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Task.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Task.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Task.Alert.Rule.AlertMessage" />
	</StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="false">
      <DisplayStrings>
        <DisplayString ElementID="Proactive.NOSC.Daily.Tasks">
          <Name>Proactive NOSC Daily Tasks</Name>
          <Description>
v1.0.2.4  15 Dec 2021 Updated Daily Summary to reduce output, updated rule task alert
v1.0.2.1   6 Dec 2021 Updated ScriptErrors and LongRunning Scripts
v1.0.1.9   1 Dec 2021 Updated FT's to select, corrected longrunning and DailySummary, ScriptErrors
v1.0.1.8  19 Nov 2021 Added longrunning script check
v1.0.1.3   6 May 2021 GPO, SCOMAlerts report DS/WA
v1.0.1.0  20 Apr 2021 Updated timeouts, datasources, WA, rules
v1.0.0.73 16 Dec 2020 Updated timeouts for slow VM performance
v1.0.0.70  2 Dec 2020 Updated DailySummary,Pending Reboot WA/datasources
v1.0.0.65 18 Nov 2020 Updated DailySummary,Pending Reboot tasks/datasources
v1.0.0.59  9 Nov 2020 Updated reports
v1.0.0.55 29 Oct 2020 Updated generic for capabilities, added alerts, expiring certs daily report and rules
v1.0.0.49  9 Sep 2020 Updated Daily Summary Logical Disk run time, DailySummary Task rule, datasource
v1.0.0.41 26 Aug 2020 Updated Daily Summary per SysAdmin, corrected Rules, PendingReboot rule bag
v1.0.0.23 20 Aug 2020 Updated alert rule contents, added unhealthy agents, maintenance mode variables, property bags
v1.0.0.17 17 Aug 2020 Added Pending Reboot monitor alerts functionality
v1.0.0.10  5 Aug 2020 Updated Test variable, previously Test.Count
v1.0.0.3   5 Aug 2020 Updated Task description, Alert rule regular expression for manual task execution
v1.0.0.0   4 Aug 2020 Pack that contains NOSC daily tasks, reports, alerts for SysAdmin Teams.  
Example Logical Disk Free Space report.  Added additional debug, removed MatchCount suppression, updated $Test
Removed $Summary and $Details bags, created 2 new 550 events for total alerts and alert summary and detail.
		  </Description>
        </DisplayString>
		<DisplayString ElementID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Alert.Rule.Datasource">
          <Name>Proactive NOSC DailyTasks ExpiringCertsAlerts Report Script Alert Datasource</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Alert.Rule.Datasource">
          <Name>Proactive NOSC DailyTasks LogicalDiskFreeSpaceAlerts Report Script Alert Datasource</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Alert.Rule.Datasource">
          <Name>Proactive NOSC DailyTasks PendingRebootAlerts Report Script Alert Datasource</Name>
        </DisplayString>
		<DisplayString ElementID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.Alert.Rule.Datasource">
          <Name>Proactive NOSC DailyTasks PendingRebootAlerts ServerName Report Script Alert Datasource</Name>
        </DisplayString>
		<DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Alert.Rule.Datasource">
          <Name>Proactive NOSC DailyTasks DailySummary Report Script Alert Datasource</Name>
        </DisplayString>
		<DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Alert.Rule.Datasource">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAlerts Report Script Alert Rule Datasource</Name>
        </DisplayString>
		<DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule.Datasource">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAdmin LongrunningScripts Report Script Alert Rule Datasource</Name>
        </DisplayString>
		<DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule.Datasource">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAdmin ScriptErrors Report Script Alert Rule Datasource</Name>
        </DisplayString>

		<DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Alert.WA">
          <Name>Proactive NOSC DailyTasks DailySummary Report Script Alert WA</Name>
        </DisplayString>
		<DisplayString ElementID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Alert.WA">
          <Name>Proactive NOSC DailyTasks ExpiringCertsAlerts Report Script Alert WA</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Alert.WA">
          <Name>Proactive NOSC DailyTasks LogicalDiskFreeSpaceAlerts Report Script Alert WA</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Alert.WA">
          <Name>Proactive NOSC DailyTasks PendingRebootAlerts Report Script Alert WA</Name>
        </DisplayString>
		<DisplayString ElementID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.Alert.WA">
          <Name>Proactive NOSC DailyTasks PendingRebootAlerts ServerName Report Script Alert WA</Name>
        </DisplayString>
		<DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Alert.Rule.WA">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAlerts Report Script Alert Rule WA</Name>
        </DisplayString>
		<DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule.WA">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAdmin LongrunningScripts Report Script Alert Rule WA</Name>
        </DisplayString>
		<DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule.WA">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAdmin ScriptErrors Report Script Alert Rule WA</Name>
        </DisplayString>

        <DisplayString ElementID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Alert.Rule">
          <Name>Proactive NOSC DailyTasks.ExpiringCertsAlerts.Report Script Alert Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks.ExpiringCertsAlerts.Report Script Alert Rule Triggered</Name>
          <Description>Proactive NOSC DailyTasks.ExpiringCertsAlerts.Report Script Alert Rule

Daily Report for Expiring Certificate alerts

Alert Count: {0}
Message: {1}

# Summary:
#=========================================================================
{2}
</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Alert.Rule">
          <Name>Proactive NOSC DailyTasks.LogicalDiskFreeSpaceAlerts.Report Script Alert Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks.LogicalDiskFreeSpaceAlerts.Report Script Alert Rule Triggered</Name>
          <Description>Proactive NOSC DailyTasks.LogicalDiskFreeSpaceAlerts.Report Script Alert Rule

Daily Report for Logical Disk free space alerts

Alert Count: {0}
Message: {1}

# Summary:
#=========================================================================
{2}

# Details
#=========================================================================
Details:
{3}
</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Task.Alert.Rule">
          <Name>Proactive NOSC DailyTasks.LogicalDiskFreeSpaceAlerts.Report Script Task Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Task.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks.LogicalDiskFreeSpaceAlerts.Report Script Task Alert</Name>
          <Description>Proactive NOSC DailyTasks.LogicalDiskFreeSpaceAlerts.Report Script Task Alert Rule: detected a bad condition
Daily Report for Logical Disk free space alerts

Event Description: 
{0}
</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Task.Alert.ZERO.Rule">
          <Name>Proactive NOSC DailyTasks.LogicalDiskFreeSpaceAlerts.Report Script Task Alert ZERO Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Script.Task.Alert.ZERO.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks.LogicalDiskFreeSpaceAlerts.Report Script Task Alert ZERO</Name>
          <Description>Proactive NOSC DailyTasks.LogicalDiskFreeSpaceAlerts.Report Script Task Alert Rule: detected a good condition
Daily Report for Logical Disk free space alerts

Event Description: 
{0}
</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Alert.Rule">
          <Name>Proactive NOSC DailyTasks.PendingRebootAlerts.Report Script Alert Rule</Name>
          <Description />
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks.PendingRebootAlerts.Report Script Alert Rule Triggered</Name>
          <Description>Proactive NOSC DailyTasks Pending Reboot Alerts Report Script Alert Rule

{1}

{2}

</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Task.Alert.Rule">
          <Name>Proactive NOSC DailyTasks.PendingRebootAlerts.Report Script Task Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Script.Task.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks.PendingRebootAlerts.Report Script Task Alert</Name>
          <Description>Proactive NOSC DailyTasks Pending Reboot Alerts Report Script Task Alert Rule
Daily Report for Server Pending reboot alerts

Event Description: 
{0}
</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.Alert.Rule">
          <Name>Proactive NOSC DailyTasks.PendingRebootAlerts.ServerName.Report Script Alert Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Script.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks.PendingRebootAlerts.ServerName.Report Script Alert Rule Triggered</Name>
          <Description>Proactive NOSC DailyTasks Pending Reboot ServerName Report Script Alert Rule
{2}

</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.Report.Task">
          <Name>Proactive NOSC DailyTasks.DailySummary.Report Manual Task</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Task">
          <Name>Proactive NOSC DailyTasks.ExpiringCertsAlerts.Report Manual Task</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.LogicalDiskFreeSpaceAlerts.Report.Task">
          <Name>Proactive NOSC DailyTasks.LogicalDiskFreeSpaceAlerts.Report Manual Task</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.Report.Task">
          <Name>Proactive NOSC DailyTasks.PendingRebootAlerts.Report Manual Task</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.PendingRebootAlerts.ServerName.Report.Task">
          <Name>Proactive NOSC DailyTasks.PendingRebootAlerts.ServerName.Report Manual Task</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Alert.Rule">
          <Name>Proactive NOSC DailyTasks.DailySummary.Report Script Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks.DailySummary.Report Script Alert</Name>
          <Description>Proactive NOSC DailyTasks Daily Summary Report Script Task Alert
{0}
</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Task.Alert.Rule">
          <Name>Proactive NOSC DailyTasks.DailySummary.Report Script Task Alert</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.Report.Script.Task.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks.DailySummary.Report Script Task Alert</Name>
          <Description>Proactive NOSC DailyTasks Daily Summary Report Script Task Alert
Daily Server Summary Report

Event Description:
{0}
</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Task.Alert.Rule">
          <Name>Proactive NOSC DailyTasks.ExpiringCertsAlerts.Report Script Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.ExpiringCertsAlerts.Report.Script.Task.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks.ExpiringCertsAlerts.Report Script Task Alert</Name>
          <Description>Proactive NOSC DailyTasks Expiring Certificates Alert Report Script Task
Daily Server Expiring certificates report

Event Description: 
{0}
</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.Report.Execution.Error.Alert.Rule">
          <Name>Proactive NOSC DailyTasks.Report.Execution.Error Script Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.Report.Execution.Error.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks.Report.Execution.Error Script Task Alert</Name>
          <Description>Proactive NOSC DailyTasks Report Execution Errors Alert Report Script Task

Event Description:
{0}
</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Task">
          <Name>Proactive NOSC DailyTasks.DailySummary.SCOMAlerts.Report Manual Task</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Alert.Rule">
          <Name>Proactive NOSC DailyTasks.DailySummary.SCOMAlerts.Report Script Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks.DailySummary.SCOMAlerts.Report Script Alert</Name>
          <Description>{0}

{1}
</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Task.Alert.Rule">
          <Name>Proactive NOSC DailyTasks.DailySummary.SCOMAlerts.Report Script Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAlerts.Report.Script.Task.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks.DailySummary.SCOMAlerts.Report Script Task Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
		
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Task">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAdmin LongrunningScripts Report Manual Task</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAdmin LongrunningScripts Report Script Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAdmin LongrunningScripts Report Script Alert</Name>
          <Description>{0}

{1}
</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Task.Alert.Rule">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAdmin LongrunningScripts Report Script Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.LongrunningScripts.Report.Script.Task.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAdmin LongrunningScripts Report Script Task Alert</Name>
          <Description>{0}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Task">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAdmin ScriptErrors Report Manual Task</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAdmin ScriptErrors Report Script Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAdmin ScriptErrors Report Script Alert</Name>
          <Description>{0}

{1}
</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Task.Alert.Rule">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAdmin ScriptErrors Report Script Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.NOSC.DailyTasks.DailySummary.SCOMAdmin.ScriptErrors.Report.Script.Task.Alert.Rule.AlertMessage">
          <Name>Proactive NOSC DailyTasks DailySummary SCOMAdmin ScriptErrors Report Script Task Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
	  </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>